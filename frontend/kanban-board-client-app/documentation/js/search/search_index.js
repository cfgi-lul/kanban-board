var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AdminComponentComponent.html",[0,0.576,1,1.186]],["body/components/AdminComponentComponent.html",[0,0.923,1,1.787,2,1.376,3,0.179,4,0.156,5,1.073,6,1.073,7,1.073,8,0.156,9,4.875,10,4.875,11,2.315,12,1.073,13,1.567,14,1.567,15,2.565,16,2.565,17,2.186,18,1.567,19,2.651,20,2.119,21,2.651,22,4.709,23,2.885,24,1.675,25,3.987,26,1.675,27,3.987,28,0.156,29,0.262,30,4.709,31,3.992,32,3.482,33,1.068,34,3.38,35,1.039,36,0.923,37,3.987,38,3.38,39,0.909,40,2.731,41,0.603,42,0.025,43,0.667,44,0.333,45,0.335,46,2.315,47,0.732,48,1.468,49,1.183,50,1.261,51,1.301,52,2.694,53,5.177,54,5.177,55,2.731,56,3.987,57,3.987,58,2.731,59,0.667,60,1.073,61,1.537,62,0.603,63,1.319,64,1.229,65,1.537,66,1.537,67,2.731,68,2.731,69,0.179,70,0.09,71,2.731,72,1.475,73,3.987,74,3.987,75,3.38,76,3.987,77,3.987,78,3.987,79,1.073,80,1.567,81,1.567,82,1.073,83,2.035,84,1.073,85,1.073,86,0.943,87,1.073,88,0.943,89,1.073,90,0.943,91,1.073,92,1.073,93,0.943,94,1.073,95,1.073,96,0.943,97,1.073,98,0.943,99,1.073,100,0.943,101,1.073,102,1.073,103,0.943,104,1.073,105,1.073,106,0.943,107,0.83,108,1.073,109,0.943,110,1.073,111,1.005,112,1.073,113,0.014,114,0.014]],["title/components/AppComponent.html",[0,0.576,86,1.186]],["body/components/AppComponent.html",[0,0.789,1,0.943,2,1.376,3,0.179,4,0.156,5,1.073,6,1.073,7,1.073,8,0.156,12,1.073,13,1.567,14,1.567,15,2.565,16,2.606,17,1.734,18,1.567,20,2.119,23,2.885,24,1.675,26,1.675,28,0.156,29,0.262,33,1.068,36,0.923,42,0.025,43,0.448,44,0.228,47,0.732,48,1.468,49,1.301,50,1.387,59,0.708,60,1.073,61,1.537,62,0.603,63,1.319,64,1.229,69,0.179,70,0.09,72,0.732,79,1.073,80,1.567,81,1.567,82,1.073,83,2.035,84,1.073,85,1.073,86,1.787,87,1.073,88,0.943,89,1.073,90,0.943,91,1.851,92,1.073,93,0.943,94,1.073,95,1.073,96,1.787,97,1.073,98,0.943,99,1.073,100,0.943,101,1.851,102,1.073,103,0.943,104,1.073,105,1.073,106,0.943,107,0.83,108,1.073,109,0.943,110,1.073,111,1.005,112,1.073,113,0.014,114,0.014,115,2.315,116,1.794,117,4.709,118,4.709,119,4.709,120,4.709,121,3.992,122,3.987,123,3.987,124,3.992,125,4.668,126,4.709,127,2.45,128,5.177,129,2.731,130,2.98,131,3.38,132,3.987,133,3.987,134,2.731,135,3.987,136,2.731,137,2.98,138,2.731,139,0.458,140,2.245,141,1.794,142,3.38,143,2.731,144,1.673,145,1.229,146,2.041,147,2.731,148,2.731,149,3.52,150,2.731,151,2.731,152,1.537,153,1.837,154,0.943,155,3.987,156,3.987]],["title/injectables/AuthService.html",[145,1.545,157,0.92]],["body/injectables/AuthService.html",[3,0.148,4,0.129,8,0.129,28,0.129,29,0.227,33,0.928,35,0.499,36,1.084,39,0.812,41,1.122,42,0.025,43,0.602,44,0.511,45,0.623,47,1.58,48,1.275,49,0.87,50,0.928,52,2.189,59,0.571,62,0.499,69,0.148,70,0.075,72,1.494,75,1.917,113,0.012,114,0.012,116,1.018,124,3.567,125,3.997,131,3.997,139,1.026,145,1.558,153,1.521,154,0.781,157,0.928,158,1.018,159,1.917,160,2.318,161,3.567,162,4.118,163,4.207,164,4.207,165,3.463,166,4.714,167,3.463,168,4.714,169,2.329,170,3.997,171,2.935,172,2.935,173,4.207,174,3.997,175,1.386,176,2.654,177,3.463,178,2.122,179,2.262,180,2.572,181,2.935,182,2.262,183,1.386,184,2.262,185,3.463,186,2.262,187,1.521,188,5.36,189,2.262,190,2.262,191,3.463,192,3.524,193,2.262,194,2.262,195,3.463,196,2.262,197,3.463,198,2.262,199,2.262,200,3.997,201,2.262,202,1.653,203,4.207,204,2.262,205,2.262,206,2.262,207,2.262,208,1.273,209,1.917,210,1.917,211,1.521,212,1.093,213,1.093,214,2.262,215,2.262,216,2.329,217,2.262,218,2.262,219,2.366,220,3.463,221,1.917,222,2.83,223,4.207,224,4.207,225,1.521,226,2.262,227,2.262,228,2.262,229,2.262,230,2.262,231,2.262,232,3.463,233,2.262,234,2.189,235,2.262,236,4.207,237,3.463,238,3.463,239,2.262,240,3.463,241,2.262,242,2.262,243,2.262,244,2.262,245,2.262,246,2.262,247,2.262,248,2.262,249,2.262,250,2.262]],["title/interfaces/AuthenticationRequest.html",[251,0.92,252,2.567]],["body/interfaces/AuthenticationRequest.html",[3,0.307,4,0.267,8,0.267,28,0.267,29,0.376,42,0.023,44,0.478,45,0.791,52,3.357,69,0.307,70,0.189,113,0.02,114,0.02,139,1.129,140,2.634,222,4.339,251,1.253,252,4.281,253,2.105,254,3.967,255,2.26,256,3.147,257,3.147,258,3.147,259,2.867,260,3.147,261,3.147,262,3.853,263,3.853,264,2.634,265,3.147]],["title/classes/Board.html",[70,0.113,141,1.545]],["body/classes/Board.html",[3,0.283,4,0.246,8,0.246,28,0.246,29,0.357,35,0.952,36,1.051,39,1.051,41,0.952,42,0.025,43,0.704,44,0.523,45,0.529,51,1.5,59,0.611,69,0.283,70,0.142,113,0.019,114,0.019,139,0.913,141,2.45,266,2.083,267,3.656,268,2.63,269,4.044,270,4.46,271,3.065,272,5.444,273,2.083,274,3.261,275,4.312,276,4.312,277,4.312,278,2.428,279,2.428,280,3.223,281,3.223,282,4.312,283,4.312]],["title/components/BoardComponent.html",[0,0.576,88,1.186]],["body/components/BoardComponent.html",[0,0.593,1,0.598,2,0.968,3,0.114,4,0.099,5,0.68,6,0.68,7,0.68,8,0.099,12,0.68,13,1.102,14,1.102,15,2.319,16,2.319,17,0.637,18,1.102,19,1.99,20,2.009,23,2.166,24,1.178,26,1.178,28,0.255,29,0.184,33,0.751,35,0.619,36,0.933,39,0.972,41,0.986,42,0.025,43,0.565,44,0.464,45,0.547,47,1.281,48,1.93,49,0.435,50,0.464,51,1.022,59,0.707,60,0.68,62,0.619,63,0.836,64,0.779,65,0.974,69,0.114,70,0.057,72,0.464,79,0.68,80,1.102,81,1.102,82,0.68,83,1.597,84,0.68,85,0.68,86,0.598,87,0.68,88,1.403,89,0.68,90,0.598,91,0.68,92,0.68,93,0.598,94,0.68,95,0.68,96,0.598,97,0.68,98,0.598,99,0.68,100,0.598,101,0.68,102,0.68,103,1.403,104,0.68,105,0.68,106,0.968,107,1.531,108,0.68,109,0.598,110,0.68,111,0.637,112,0.68,113,0.01,114,0.01,127,0.901,139,0.801,141,2.655,144,1.061,152,0.974,153,1.164,154,0.968,160,2.06,180,1.876,183,2.737,202,1.389,219,0.68,234,1.84,255,0.836,268,1.355,273,0.836,274,1.459,284,1.467,285,2.997,286,3.535,287,3.535,288,3.535,289,3.535,290,2.997,291,2.804,292,2.804,293,3.535,294,2.997,295,2.804,296,3.919,297,4.064,298,2.377,299,4.064,300,3.446,301,1.731,302,2.93,303,5.034,304,5.034,305,3.085,306,3.386,307,2.804,308,2.804,309,3.446,310,1.731,311,2.804,312,1.731,313,2.804,314,4.064,315,4.064,316,1.731,317,1.467,318,3.446,319,2.804,320,1.731,321,1.731,322,1.731,323,1.731,324,1.731,325,3.535,326,2.804,327,2.804,328,2.804,329,1.467,330,0.901,331,2.804,332,1.467,333,1.731,334,1.731,335,1.467,336,1.731,337,1.731,338,2.377,339,1.731,340,1.294,341,1.731,342,1.294,343,1.731,344,1.164,345,1.731,346,1.467,347,1.731,348,1.731,349,1.731,350,1.731,351,2.804,352,2.804,353,2.804,354,1.731,355,1.731,356,1.731,357,1.731,358,1.731,359,1.731,360,1.731,361,1.731,362,1.731,363,1.731,364,1.731,365,1.731,366,1.731,367,2.804,368,2.804,369,2.804,370,1.731,371,1.731,372,1.731,373,1.467,374,1.731,375,1.731,376,1.731,377,1.731,378,1.731,379,1.731,380,1.731,381,1.164,382,1.164,383,1.061,384,2.804,385,3.038,386,2.377,387,2.804]],["title/interfaces/BoardDTO.html",[251,0.92,269,2.105]],["body/interfaces/BoardDTO.html",[3,0.307,4,0.267,8,0.267,28,0.267,29,0.376,39,1.195,42,0.024,43,0.724,44,0.516,45,0.825,51,1.621,59,0.525,69,0.307,113,0.02,114,0.02,139,1.038,251,1.253,253,2.105,269,3.51,270,4.822,388,3.967,389,4.627,390,3.225]],["title/injectables/BoardService.html",[157,0.92,302,2.105]],["body/injectables/BoardService.html",[3,0.2,4,0.174,8,0.174,28,0.174,29,0.283,33,1.155,35,0.672,36,1.028,39,0.966,41,1.201,42,0.025,43,0.611,44,0.498,45,0.667,47,1.539,49,0.765,50,0.815,51,1.258,59,0.67,62,0.672,69,0.2,70,0.1,113,0.015,114,0.015,116,1.369,139,0.912,141,2.252,154,1.051,157,1.155,158,1.369,160,1.967,176,3.359,180,2.746,202,2.344,208,1.713,212,1.47,213,1.47,216,2.047,219,2.258,234,1.584,269,1.865,302,2.641,330,1.584,391,2.58,392,2.818,393,3.366,394,3.654,395,4.614,396,3.654,397,5.443,398,4.31,399,3.043,400,4.31,401,4.31,402,5.004,403,3.043,404,3.043,405,4.31,406,3.043,407,3.043,408,4.31,409,3.043,410,4.31,411,3.654,412,3.043,413,3.043,414,3.043,415,5.443,416,3.222,417,3.335,418,2.047,419,3.043,420,3.864,421,2.58,422,3.043,423,2.275,424,4.31,425,3.043,426,2.58,427,2.275,428,3.043]],["title/injectables/BoardSocketService.html",[157,0.92,306,2.31]],["body/injectables/BoardSocketService.html",[3,0.152,4,0.132,8,0.132,28,0.132,29,0.231,33,0.942,35,0.51,36,1.015,41,1.132,42,0.025,43,0.576,44,0.469,45,0.629,47,1.448,48,2.069,49,0.58,50,1.277,59,0.535,62,0.51,69,0.152,70,0.076,113,0.012,114,0.012,116,1.039,139,1.088,141,1.039,145,2.431,152,1.3,154,0.797,157,0.942,158,1.039,160,2.531,180,2.155,183,2.156,212,1.116,213,1.116,219,2.124,234,3.15,306,2.366,330,1.831,383,1.415,392,2.399,429,5.217,430,1.958,431,4.262,432,4.262,433,4.262,434,4.765,435,4.765,436,3.518,437,4.262,438,3.518,439,4.765,440,2.309,441,2.309,442,3.518,443,2.309,444,2.309,445,2.309,446,3.518,447,5.129,448,2.309,449,2.309,450,2.309,451,2.309,452,3.518,453,3.518,454,4.262,455,2.309,456,2.309,457,4.262,458,2.309,459,2.309,460,3.518,461,2.63,462,3.518,463,3.518,464,3.518,465,2.309,466,2.309,467,3.518,468,2.309,469,2.309,470,3.518,471,2.309,472,2.309,473,2.309,474,2.309,475,2.309,476,3.518,477,2.309,478,2.309,479,2.309,480,2.309,481,2.309,482,2.309,483,2.309,484,2.309,485,2.309,486,2.309,487,2.309,488,2.309,489,2.309,490,2.309,491,2.309,492,3.518,493,3.518,494,2.309,495,2.309,496,3.613,497,3.518,498,4.262,499,2.309,500,2.309,501,2.309,502,2.309,503,2.309,504,2.309,505,2.309,506,2.309,507,1.958,508,3.518,509,2.309,510,2.309,511,2.309,512,2.309,513,2.309,514,2.309,515,2.309,516,3.518,517,2.309,518,3.518,519,2.309,520,3.518,521,2.309,522,2.309,523,2.309,524,2.309,525,2.309,526,2.309,527,2.309]],["title/components/BoardsListComponent.html",[0,0.576,90,1.186]],["body/components/BoardsListComponent.html",[0,0.631,1,0.656,2,1.043,3,0.125,4,0.108,5,0.746,6,0.746,7,0.746,8,0.108,12,0.746,13,1.187,14,1.187,15,2.374,16,2.374,17,0.699,18,1.187,19,2.118,20,2.106,21,2.635,23,2.305,24,1.269,26,1.269,28,0.108,29,0.198,31,1.61,33,0.809,35,0.667,36,0.96,39,1.079,41,0.947,42,0.025,43,0.587,44,0.39,45,0.526,47,1.149,48,1.835,49,1.078,50,1.149,59,0.687,60,0.746,61,1.069,62,0.419,63,0.918,64,0.855,65,1.069,66,1.069,69,0.125,70,0.063,72,0.509,79,0.746,80,1.187,81,1.187,82,0.746,83,1.685,84,0.746,85,0.746,86,0.656,87,0.746,88,0.656,89,0.746,90,1.48,91,2.458,92,0.746,93,0.656,94,0.746,95,0.746,96,0.656,97,0.746,98,0.656,99,0.746,100,0.656,101,0.746,102,0.746,103,0.656,104,0.746,105,0.746,106,0.656,107,0.578,108,0.746,109,0.656,110,0.746,111,0.699,112,0.746,113,0.011,114,0.011,121,3.189,139,0.318,141,2.441,144,1.164,145,2.578,146,1.42,149,2.258,152,1.069,153,3.148,154,0.656,160,2.054,162,2.53,180,1.581,181,1.61,183,2.628,200,1.61,202,1.685,219,0.746,270,1.42,296,3.205,302,2.628,330,0.988,332,3.189,335,1.61,382,2.032,383,1.851,385,2.258,394,1.61,395,1.61,396,2.561,417,1.164,528,4.958,529,4.958,530,1.61,531,3.189,532,2.812,533,2.812,534,2.812,535,2.53,536,2.812,537,3.021,538,3.021,539,3.762,540,3.762,541,4.288,542,3.021,543,3.021,544,1.899,545,3.726,546,3.021,547,1.899,548,3.021,549,1.899,550,3.762,551,1.899,552,3.021,553,1.899,554,1.899,555,3.021,556,3.021,557,3.021,558,3.021,559,1.899,560,3.021,561,1.899,562,3.021,563,3.021,564,1.899,565,1.899,566,1.164,567,1.42,568,1.42,569,1.42,570,1.61,571,1.42,572,1.61,573,1.899,574,3.021,575,1.899,576,3.021,577,1.899,578,4.288,579,3.021,580,1.899,581,3.021,582,2.561,583,2.561,584,3.021,585,1.899]],["title/classes/Column.html",[70,0.113,274,1.787]],["body/classes/Column.html",[3,0.278,4,0.242,8,0.242,28,0.242,29,0.354,35,0.936,36,1.044,39,1.04,41,0.936,42,0.025,43,0.699,44,0.52,45,0.818,51,1.488,59,0.605,69,0.278,70,0.14,113,0.019,114,0.019,139,0.903,266,2.049,268,2.603,271,3.033,273,2.049,274,2.803,278,2.388,279,2.388,280,3.17,281,3.17,390,3.7,586,3.595,587,5.019,588,5.387,589,4.241,590,4.241,591,4.19,592,4.241,593,4.241,594,4.241]],["title/interfaces/ColumnDTO.html",[251,0.92,390,1.934]],["body/interfaces/ColumnDTO.html",[3,0.307,4,0.267,8,0.267,28,0.267,29,0.376,39,1.195,42,0.024,43,0.724,44,0.516,45,0.825,51,1.621,59,0.525,69,0.307,113,0.02,114,0.02,139,1.038,251,1.253,253,2.105,389,4.627,390,3.225,587,5.469,595,3.967,596,3.51]],["title/injectables/ColumnService.html",[157,0.92,597,2.567]],["body/injectables/ColumnService.html",[3,0.219,4,0.19,8,0.19,28,0.19,29,0.301,33,1.23,35,0.736,36,0.996,39,1.185,41,1.25,42,0.025,43,0.636,44,0.495,45,0.694,47,1.408,49,0.838,50,0.893,51,1.154,59,0.667,62,0.736,69,0.219,70,0.11,113,0.016,114,0.016,116,1.5,139,0.559,154,1.151,157,1.23,158,1.5,160,2.065,175,2.042,176,3.188,178,2.814,180,2.643,202,2.225,208,1.877,212,1.61,213,1.61,219,2.065,225,3.089,234,1.734,274,3.195,330,1.734,390,1.877,392,2.958,393,3.534,411,3.893,416,2.491,417,2.814,418,2.242,420,3.995,421,2.826,423,2.491,426,2.826,427,3.433,597,3.433,598,2.826,599,4.593,600,4.593,601,4.593,602,4.593,603,4.593,604,3.333,605,4.593,606,3.333,607,4.593,608,3.333,609,4.593,610,3.333,611,3.333,612,3.333,613,3.333,614,3.333]],["title/classes/Comment.html",[70,0.113,615,2.105]],["body/classes/Comment.html",[3,0.258,4,0.224,8,0.224,28,0.224,29,0.337,35,0.867,36,1.079,39,1.168,41,0.867,42,0.025,43,0.441,44,0.537,45,0.838,51,1.435,59,0.576,69,0.258,70,0.129,72,1.621,113,0.018,114,0.018,139,0.86,202,1.544,266,1.897,268,2.477,271,2.887,273,1.897,278,2.211,279,2.211,615,3.142,616,3.33,617,3.351,618,4.84,619,3.84,620,4.84,621,3.84,622,5.127,623,3.928,624,3.928,625,3.833,626,3.928,627,3.928,628,3.33,629,3.928,630,3.928,631,3.928,632,3.928,633,3.928,634,3.928,635,3.928,636,3.928]],["title/interfaces/CommentDTO.html",[251,0.92,617,1.787]],["body/interfaces/CommentDTO.html",[3,0.288,4,0.251,8,0.251,28,0.251,29,0.361,39,1.279,42,0.024,44,0.542,45,0.847,51,1.585,59,0.492,69,0.288,113,0.019,114,0.019,139,1.008,251,1.175,253,1.973,617,2.864,618,5.346,619,4.241,620,5.346,621,4.241,625,4.495,637,3.718,638,3.657]],["title/injectables/CommentService.html",[157,0.92,639,2.31]],["body/injectables/CommentService.html",[3,0.224,4,0.195,8,0.195,28,0.195,29,0.306,33,1.251,35,0.754,36,1.004,39,1.222,41,1.263,42,0.025,43,0.642,44,0.528,45,0.701,47,1.425,49,0.858,50,0.915,51,1.174,59,0.673,62,0.754,69,0.224,70,0.112,113,0.016,114,0.016,116,1.536,139,0.783,154,1.179,157,1.251,158,1.536,161,4.511,175,2.092,176,3.221,178,2.861,180,2.66,192,3.49,202,1.835,208,1.922,212,1.649,213,1.649,219,2.091,225,3.14,330,1.777,417,2.861,418,2.296,420,2.296,427,2.552,615,3.506,617,1.777,619,2.296,621,3.14,639,3.14,640,2.894,641,3.958,642,4.669,643,4.669,644,4.669,645,4.669,646,3.414,647,4.669,648,3.414,649,4.669,650,3.414,651,4.669,652,3.414,653,3.414,654,3.414,655,3.414,656,3.414,657,3.414,658,3.414,659,3.414]],["title/components/ErrorDisplayComponent.html",[0,0.576,93,1.186]],["body/components/ErrorDisplayComponent.html",[0,0.838,1,1.049,2,1.486,3,0.199,4,0.173,5,1.692,6,1.194,7,1.194,8,0.173,12,1.194,13,1.692,14,1.692,15,2.614,16,2.614,17,1.118,18,1.692,19,2.814,28,0.173,29,0.282,33,1.153,36,0.721,42,0.025,43,0.483,47,0.814,48,1.118,49,0.763,50,0.814,59,0.483,60,1.194,62,0.67,65,1.71,69,0.199,70,0.1,72,0.814,79,1.194,80,1.692,81,1.692,82,1.194,83,2.137,84,1.194,85,1.194,86,1.049,87,1.194,88,1.049,89,1.194,90,1.049,91,1.194,92,1.194,93,1.877,94,2.504,95,1.194,96,1.049,97,1.194,98,1.049,99,1.194,100,1.049,101,1.194,102,1.194,103,1.049,104,1.194,105,1.194,106,1.049,107,0.924,108,1.194,109,1.049,110,1.194,111,1.118,112,1.194,113,0.015,114,0.015,216,2.043,660,4.999,661,4.238,662,4.238,663,2.575,664,4.304,665,4.999,666,4.999,667,5.961,668,4.999,669,4.999,670,4.999,671,5.961,672,4.999,673,6.37,674,4.999,675,5.438,676,3.037,677,4.304,678,4.304,679,3.037,680,2.043,681,3.037]],["title/components/HeaderComponent.html",[0,0.576,96,1.186]],["body/components/HeaderComponent.html",[0,0.761,1,0.886,2,1.315,3,0.168,4,0.147,5,1.009,6,1.009,7,1.009,8,0.147,12,1.009,13,1.497,14,1.497,15,2.536,16,2.536,17,0.945,18,1.497,20,2.044,21,2.557,24,1.6,26,1.6,28,0.147,29,0.25,33,1.02,35,0.567,36,1.042,41,0.841,42,0.025,43,0.564,44,0.318,45,0.467,47,1.02,48,1.85,49,0.645,50,0.688,59,0.686,60,1.009,62,0.567,64,1.714,66,1.445,69,0.168,70,0.085,72,1.602,79,1.009,80,1.497,81,1.497,82,1.009,83,1.975,84,1.009,85,1.009,86,0.886,87,1.009,88,0.886,89,1.009,90,0.886,91,1.009,92,1.009,93,0.886,94,1.009,95,1.009,96,1.735,97,1.009,98,0.886,99,1.009,100,0.886,101,1.009,102,1.009,103,0.886,104,1.009,105,1.009,106,0.886,107,0.78,108,1.009,109,1.735,110,1.009,111,0.945,112,1.009,113,0.013,114,0.013,140,2.145,141,1.714,169,2.562,202,1.497,211,1.726,213,1.24,268,1.84,285,3.851,300,4.26,317,2.176,535,3.055,536,3.395,566,1.573,571,1.919,680,2.562,682,2.176,683,3.809,684,3.851,685,3.809,686,3.809,687,5.368,688,5.368,689,5.368,690,3.809,691,2.847,692,3.229,693,2.567,694,3.38,695,4.542,696,3.809,697,1.573,698,1.726,699,3.809,700,3.809,701,2.567,702,3.809,703,5.025,704,2.567,705,3.809,706,2.567,707,3.229,708,2.567,709,2.176,710,1.726,711,2.567,712,1.919,713,2.567,714,1.919,715,2.567,716,2.567,717,2.567,718,2.567,719,3.809,720,2.847,721,2.847,722,2.847,723,3.809]],["title/components/NotFoundComponent.html",[0,0.576,98,1.186]],["body/components/NotFoundComponent.html",[0,0.949,1,1.332,2,1.75,3,0.253,4,0.22,5,1.517,6,1.517,7,1.517,8,0.22,12,1.517,13,1.992,14,1.992,15,2.711,16,2.711,17,1.421,18,1.517,24,2.129,26,2.129,42,0.024,43,0.569,59,0.433,60,1.517,62,0.852,69,0.253,70,0.127,72,1.034,79,1.517,80,1.992,81,1.992,82,1.517,83,2.362,84,1.517,85,1.517,86,1.332,87,1.517,88,1.332,89,1.517,90,1.332,91,1.517,92,1.517,93,1.332,94,1.517,95,1.517,96,1.332,97,1.517,98,2.075,99,1.517,100,1.332,101,1.517,102,1.517,103,1.332,104,1.517,105,1.517,106,1.332,107,1.173,108,1.517,109,1.332,110,1.517,111,1.421,112,1.517,113,0.018,114,0.018,724,3.271,725,3.271,726,3.271,727,6.01,728,5.068,729,5.068,730,5.068]],["title/classes/Role.html",[70,0.113,187,2.31]],["body/classes/Role.html",[3,0.352,4,0.306,8,0.306,42,0.023,69,0.352,70,0.177,113,0.022,114,0.022,187,4.179,266,2.591,731,4.546]],["title/components/SignInComponent.html",[0,0.576,100,1.186]],["body/components/SignInComponent.html",[0,0.712,1,0.794,2,1.21,3,0.151,4,0.131,5,0.903,6,0.903,7,0.903,8,0.131,12,0.903,13,1.378,14,1.378,15,2.48,16,2.48,17,0.846,18,1.378,19,2.393,20,1.912,21,2.393,24,1.473,26,1.473,28,0.131,29,0.23,33,0.939,35,0.774,36,0.858,41,0.507,42,0.025,43,0.708,44,0.355,45,0.282,47,0.939,48,1.75,52,3.01,59,0.679,60,0.903,62,0.507,64,1.034,65,1.294,66,1.294,69,0.151,70,0.076,72,0.616,79,0.903,80,1.378,81,1.378,82,0.903,83,1.868,84,0.903,85,0.903,86,0.794,87,0.903,88,0.794,89,0.903,90,0.794,91,0.903,92,0.903,93,0.794,94,0.903,95,0.903,96,0.794,97,0.903,98,0.794,99,0.903,100,1.641,101,2.416,102,0.903,103,0.794,104,0.903,105,0.903,106,0.794,107,0.699,108,0.903,109,0.794,110,0.903,111,0.846,112,0.903,113,0.012,114,0.012,145,2.524,146,1.718,152,1.294,154,0.794,160,1.378,169,1.546,171,1.949,222,4.193,382,2.358,383,2.148,531,3.603,532,3.177,533,3.177,534,3.177,535,2.858,566,1.409,567,1.718,568,1.718,569,1.718,570,1.949,572,2.972,697,3.705,732,4.573,733,4.573,734,1.949,735,3.506,736,3.506,737,4.25,738,4.25,739,4.754,740,4.754,741,1.949,742,4.03,743,3.506,744,2.972,745,2.299,746,2.299,747,4.339,748,2.299,749,1.949,750,2.299,751,2.972,752,4.339,753,2.299,754,3.506,755,2.299,756,2.299,757,2.299,758,2.299,759,2.299,760,2.299,761,2.299,762,4.754,763,3.506,764,3.506,765,3.506,766,3.506]],["title/components/TaksPreviewComponent.html",[0,0.576,103,1.186]],["body/components/TaksPreviewComponent.html",[0,0.837,1,1.047,2,1.484,3,0.199,4,0.173,5,1.191,6,1.191,7,1.191,8,0.173,12,1.191,13,1.689,14,1.689,15,2.613,16,2.613,17,1.116,18,1.689,19,2.811,20,2.247,24,1.806,26,1.806,28,0.173,29,0.282,36,1.049,42,0.025,43,0.688,59,0.61,60,1.191,62,0.669,64,1.364,65,1.707,69,0.199,70,0.1,72,0.812,79,1.191,80,1.689,81,1.689,82,1.191,83,2.135,84,1.191,85,1.191,86,1.047,87,1.191,88,1.047,89,1.191,90,1.047,91,1.191,92,1.191,93,1.047,94,1.191,95,1.191,96,1.047,97,1.191,98,1.047,99,1.191,100,1.047,101,1.191,102,1.191,103,1.876,104,2.591,105,1.191,106,1.047,107,1.307,108,1.191,109,1.047,110,1.191,111,1.116,112,1.191,113,0.015,114,0.015,264,2.42,298,4.863,340,4.759,342,2.266,582,3.644,680,2.039,691,3.213,692,3.644,697,2.634,698,2.891,707,4.233,714,3.213,767,5.398,768,2.57,769,3.644,770,4.298,771,4.298,772,4.863,773,4.298,774,4.298,775,4.298,776,4.298,777,4.298]],["title/classes/Task.html",[70,0.113,107,1.044]],["body/classes/Task.html",[3,0.268,4,0.233,8,0.233,28,0.233,29,0.345,35,0.901,36,1.065,39,1.015,41,0.901,42,0.025,43,0.459,44,0.53,45,0.83,51,1.462,59,0.59,69,0.268,70,0.135,107,1.599,113,0.018,114,0.018,127,3.027,139,1.03,255,2.81,266,1.973,268,2.54,271,2.961,273,1.973,278,2.299,279,2.299,381,3.912,617,3.027,628,3.462,778,3.462,779,3.987,780,5.259,781,4.084,782,4.084,783,4.084,784,4.084,785,3.462,786,3.462,787,4.084,788,4.084,789,3.462,790,4.084]],["title/interfaces/TaskDTO.html",[251,0.92,779,2.105]],["body/interfaces/TaskDTO.html",[3,0.275,4,0.24,8,0.24,28,0.24,29,0.351,39,1.137,42,0.024,44,0.547,45,0.851,51,1.559,59,0.601,69,0.275,113,0.019,114,0.019,127,3.228,139,1.098,251,1.124,253,1.887,255,2.997,381,4.173,389,4.403,617,2.784,638,3.796,779,3.278,791,3.556,792,6.204,793,6.204]],["title/components/TaskEditorComponent.html",[0,0.576,106,1.186]],["body/components/TaskEditorComponent.html",[0,0.548,1,0.533,2,0.882,3,0.101,4,0.088,5,0.607,6,0.607,7,0.607,8,0.088,12,0.607,13,1.004,14,1.004,15,2.248,16,2.248,17,0.569,18,1.004,20,1.47,21,1.84,23,2.002,24,1.074,26,1.074,28,0.24,29,0.168,33,0.685,35,0.564,36,0.959,39,0.493,41,0.564,42,0.025,43,0.426,44,0.447,45,0.313,47,1.214,48,1.973,49,0.642,50,1.214,59,0.703,60,0.607,61,0.87,62,0.341,63,0.746,64,1.15,66,0.87,69,0.101,70,0.051,72,0.414,79,0.607,80,1.004,81,1.004,82,0.607,83,1.492,84,0.607,85,0.607,86,0.533,87,0.607,88,0.533,89,0.607,90,0.533,91,0.607,92,0.607,93,0.533,94,0.607,95,0.607,96,0.533,97,0.607,98,0.533,99,0.607,100,0.533,101,0.607,102,0.607,103,0.533,104,0.607,105,0.607,106,1.311,107,1.739,108,0.607,109,0.533,110,0.607,111,0.569,112,0.607,113,0.009,114,0.009,127,2.357,137,1.91,152,0.87,154,0.533,160,1.284,162,3.047,180,1.373,192,2.442,234,1.7,255,2.422,264,2.138,273,2.031,274,1.976,290,2.77,296,3.584,305,2.938,318,2.166,329,1.31,338,1.31,342,1.155,344,3.91,346,1.31,373,1.31,381,3.497,382,1.039,383,0.947,385,2.838,386,2.166,392,1.84,532,2.442,533,2.442,534,2.442,535,2.198,536,2.442,566,0.947,567,1.155,568,1.91,569,1.155,571,1.155,615,3.368,619,1.039,621,1.039,625,1.91,639,3.225,641,1.31,684,2.77,697,1.566,709,1.31,741,1.31,742,3.219,744,2.166,747,2.77,749,1.31,751,1.31,752,1.31,769,2.166,789,1.31,794,4.346,795,1.155,796,2.555,797,3.268,798,3.268,799,3.268,800,3.268,801,3.268,802,3.268,803,3.268,804,2.555,805,2.555,806,4.205,807,4.205,808,3.268,809,3.268,810,3.797,811,3.797,812,3.797,813,3.797,814,2.555,815,3.797,816,4.205,817,2.555,818,1.545,819,1.545,820,1.545,821,1.545,822,2.555,823,1.545,824,1.545,825,1.545,826,2.555,827,1.545,828,1.545,829,1.545,830,3.268,831,3.268,832,1.545,833,1.545,834,1.545,835,1.545,836,1.31,837,1.31,838,1.545,839,1.545,840,1.545,841,1.545,842,1.545,843,1.545,844,1.545,845,1.91,846,1.31,847,1.31,848,1.545,849,1.545,850,1.545,851,1.545,852,2.555,853,1.545,854,1.545,855,1.545,856,1.545,857,2.555,858,1.545,859,1.545,860,1.545,861,1.545,862,1.545,863,1.545,864,1.545,865,1.545,866,1.545,867,1.545,868,1.31,869,1.545,870,1.545,871,1.545,872,1.545,873,1.545,874,1.545,875,2.555,876,2.555,877,2.555,878,2.555,879,2.555,880,2.555,881,2.555,882,2.555,883,3.797,884,2.555,885,2.555]],["title/classes/TaskPreview.html",[70,0.113,591,2.31]],["body/classes/TaskPreview.html",[3,0.294,4,0.256,8,0.256,28,0.256,29,0.366,35,0.988,36,1.017,39,1.076,41,0.988,42,0.025,43,0.502,44,0.506,45,0.801,51,1.525,59,0.502,69,0.294,70,0.147,113,0.019,114,0.019,127,3.158,139,0.934,266,2.162,268,2.692,271,3.137,273,2.162,278,2.52,279,2.52,591,3.748,596,4.082,785,3.794,786,3.794,886,3.794,887,5.572,888,4.475,889,4.475]],["title/interfaces/TaskPreviewDTO.html",[251,0.92,596,2.105]],["body/interfaces/TaskPreviewDTO.html",[3,0.307,4,0.267,8,0.267,28,0.267,29,0.376,39,1.195,42,0.023,44,0.478,45,0.791,51,1.621,69,0.307,70,0.189,113,0.02,114,0.02,127,3.357,139,1.038,140,2.634,251,1.253,253,2.105,255,2.26,256,3.147,257,3.147,258,3.147,259,2.867,260,3.147,261,3.147,262,3.853,263,3.853,264,2.634,265,3.147,596,3.51,890,3.967]],["title/injectables/TaskService.html",[157,0.92,305,2.105]],["body/injectables/TaskService.html",[3,0.194,4,0.169,8,0.169,28,0.169,29,0.277,33,1.132,35,0.654,36,1.02,39,1.141,41,1.255,42,0.025,43,0.638,44,0.493,45,0.697,47,1.523,49,0.744,50,0.793,51,1.062,59,0.638,62,0.654,69,0.194,70,0.098,107,1.925,113,0.015,114,0.015,116,1.332,139,1.11,154,1.022,157,1.132,158,1.332,160,1.937,175,1.815,176,3.027,178,2.59,180,2.731,183,3.295,202,2.113,208,1.667,212,1.431,213,1.431,219,2.234,225,3.616,294,3.584,305,2.59,309,4.558,330,1.541,392,2.775,393,3.316,416,2.214,417,3.295,418,1.992,420,1.992,423,2.214,772,3.584,779,1.815,868,3.584,891,2.511,892,5.376,893,4.227,894,4.227,895,4.227,896,4.227,897,2.961,898,4.227,899,2.961,900,2.961,901,4.227,902,2.961,903,4.227,904,2.961,905,4.227,906,2.961,907,2.961,908,2.961,909,2.961,910,4.929,911,2.961,912,2.961]],["title/injectables/ThemeService.html",[157,0.92,694,2.31]],["body/injectables/ThemeService.html",[3,0.235,4,0.205,8,0.205,28,0.205,29,0.317,33,1.292,35,1.065,36,1.021,41,1.065,42,0.025,43,0.542,44,0.508,45,0.591,47,0.959,48,1.775,49,0.9,50,0.959,59,0.542,61,2.016,62,0.79,63,1.73,69,0.317,70,0.118,113,0.017,114,0.017,116,1.611,157,1.292,158,1.611,160,2.562,162,2.408,172,4.088,212,1.73,216,2.408,219,1.407,694,3.244,710,4.384,720,4.076,721,2.677,722,3.605,913,2.677,914,5.453,915,5.453,916,4.822,917,5.453,918,3.581,919,6.273,920,5.453,921,5.834,922,3.581,923,4.822,924,3.581,925,5.453,926,3.581,927,5.453,928,3.581,929,3.581,930,3.581,931,5.453,932,3.581,933,3.581,934,3.581,935,3.581,936,3.581,937,3.581,938,4.822,939,3.581]],["title/classes/User.html",[70,0.113,72,0.92]],["body/classes/User.html",[3,0.282,4,0.246,8,0.246,28,0.246,29,0.357,35,0.949,36,1.049,39,1.049,41,0.949,42,0.025,43,0.703,44,0.522,45,0.821,51,1.498,52,3.101,59,0.483,69,0.282,70,0.142,72,1.456,113,0.019,114,0.019,139,1.049,266,2.077,268,2.626,271,3.06,273,2.077,278,2.421,279,2.421,280,3.214,281,3.214,638,3.713,940,3.646,941,5.435,942,4.3,943,4.3,944,4.3,945,4.3,946,4.3]],["title/components/UserBadgeComponent.html",[0,0.576,109,1.186]],["body/components/UserBadgeComponent.html",[0,0.797,1,0.958,2,1.393,3,0.182,4,0.158,5,1.091,6,1.091,7,1.091,8,0.158,12,1.091,13,1.585,14,1.585,15,2.573,16,2.573,17,1.022,18,1.585,20,2.138,21,2.676,24,1.695,26,1.695,28,0.158,29,0.265,33,1.081,36,0.969,42,0.025,43,0.453,47,1.081,48,1.485,49,1.014,50,1.081,59,0.686,60,1.091,61,1.562,62,0.613,63,1.34,64,1.249,66,1.562,69,0.182,70,0.091,72,1.754,79,1.091,80,1.585,81,1.585,82,1.091,83,2.05,84,1.091,85,1.091,86,0.958,87,1.091,88,0.958,89,1.091,90,0.958,91,1.091,92,1.091,93,0.958,94,1.091,95,1.091,96,0.958,97,1.091,98,0.958,99,1.091,100,0.958,101,1.091,102,1.091,103,0.958,104,1.091,105,1.091,106,0.958,107,0.844,108,1.091,109,1.801,110,1.868,111,1.022,112,1.091,113,0.014,114,0.014,130,3.015,144,1.7,145,2.347,169,3.509,170,4.423,211,1.866,545,3.9,680,1.866,691,3.015,697,1.7,698,1.866,712,4.46,714,2.074,947,5.059,948,2.352,949,4.752,950,4.752,951,4.034,952,4.034,953,5.217,954,5.217,955,4.034,956,2.775,957,2.775,958,2.775,959,3.42,960,2.775,961,2.775,962,2.775,963,2.775,964,2.775,965,4.034,966,2.775,967,4.034,968,4.034,969,4.034]],["title/interfaces/UserDTO.html",[251,0.92,638,1.934]],["body/interfaces/UserDTO.html",[3,0.297,4,0.259,8,0.259,28,0.259,29,0.368,39,1.177,42,0.024,43,0.716,44,0.509,45,0.819,51,1.603,52,3.319,69,0.297,70,0.185,113,0.02,114,0.02,139,1.12,140,2.549,251,1.213,253,2.037,255,2.187,256,3.045,257,3.045,258,3.045,259,2.775,260,3.045,261,3.045,262,3.775,263,3.775,264,2.549,265,3.045,638,3.16,970,3.838]],["title/interfaces/UserRegisterDTO.html",[251,0.92,971,2.567]],["body/interfaces/UserRegisterDTO.html",[3,0.297,4,0.259,8,0.259,28,0.259,29,0.368,42,0.024,43,0.716,44,0.509,45,0.819,52,3.319,69,0.297,70,0.185,113,0.02,114,0.02,139,1.157,140,2.549,222,4.289,251,1.213,253,2.037,255,2.187,256,3.045,257,3.045,258,3.045,259,2.775,260,3.045,261,3.045,262,3.775,263,3.775,264,2.549,265,3.045,971,4.196,972,3.838]],["title/injectables/UserService.html",[32,2.31,157,0.92]],["body/injectables/UserService.html",[3,0.256,4,0.223,8,0.223,17,1.439,28,0.223,29,0.335,32,3.437,33,1.369,34,4.332,35,0.863,36,1.012,38,4.332,39,1.099,41,1.128,42,0.025,43,0.574,44,0.475,45,0.626,46,3.313,47,1.369,49,0.982,50,1.047,59,0.678,62,0.863,69,0.256,70,0.129,72,1.047,113,0.018,114,0.018,116,1.758,139,0.655,154,1.349,157,1.369,158,1.758,160,2.238,175,2.395,176,3.401,178,3.132,180,2.633,208,2.2,211,2.628,212,1.888,213,1.888,219,2.008,392,3.206,393,3.83,973,3.313,974,6.04,975,5.11,976,3.908,977,3.908,978,5.11,979,3.908,980,3.908,981,3.908]],["title/coverage.html",[982,3.975]],["body/coverage.html",[0,1.064,1,0.914,8,0.151,9,2.243,10,2.243,11,2.243,32,1.78,42,0.025,44,0.325,70,0.194,72,1.044,86,0.914,88,0.914,90,0.914,93,0.914,96,0.914,98,0.914,100,0.914,103,0.914,106,0.914,107,1.185,109,0.914,113,0.014,114,0.014,115,2.243,141,1.753,145,1.191,157,1.616,159,2.243,187,2.62,202,1.04,251,1.754,252,1.978,254,2.243,267,2.243,269,1.622,274,2.027,284,2.243,302,1.622,305,1.622,306,1.78,340,1.978,344,2.62,388,2.243,390,1.49,391,2.243,429,2.243,430,2.243,507,5.984,528,2.243,529,2.243,530,2.243,586,2.243,591,1.78,595,2.243,596,1.622,597,1.978,598,2.243,615,2.387,616,2.243,617,1.377,637,2.243,638,1.49,639,1.78,640,2.243,661,2.243,662,2.243,663,2.243,682,2.243,694,1.78,710,1.78,712,1.978,724,2.243,725,2.243,726,2.243,731,2.243,732,2.243,733,2.243,734,2.243,767,2.243,768,2.243,778,2.243,779,1.622,791,2.243,794,2.912,795,2.912,845,1.978,886,2.243,890,2.243,891,2.243,913,2.912,940,2.243,947,2.243,948,2.243,970,2.243,971,1.978,972,2.243,973,2.243,982,2.243,983,2.646,984,2.646,985,2.646,986,6.158,987,2.243,988,5.436,989,2.243,990,6.033,991,5.1,992,2.646,993,2.646,994,2.646,995,3.896,996,5.436,997,2.646,998,4.624,999,2.243,1000,2.243,1001,2.243,1002,2.243,1003,2.243,1004,2.243,1005,5.1,1006,5.436,1007,5.436,1008,2.646,1009,2.646,1010,2.646,1011,2.646,1012,2.646,1013,2.646,1014,3.896,1015,3.896,1016,2.646,1017,2.646,1018,2.646]],["title/dependencies.html",[1019,2.431,1020,3.502]],["body/dependencies.html",[42,0.025,62,1.011,63,2.213,113,0.02,114,0.02,142,3.884,144,2.808,154,1.582,209,3.884,210,3.884,566,2.808,836,4.793,837,3.884,1020,3.884,1021,4.581,1022,6.957,1023,4.581,1024,4.581,1025,4.581,1026,5.654,1027,4.793,1028,4.581,1029,4.581,1030,4.581,1031,4.581,1032,4.581,1033,4.581,1034,4.581,1035,4.581,1036,4.581,1037,4.581,1038,4.581,1039,4.581]],["title/index.html",[28,0.164,1040,2.868,1041,2.868]],["body/index.html",[0,0.931,2,1.281,4,0.212,42,0.017,49,1.241,111,1.366,113,0.017,114,0.017,149,2.773,202,1.458,259,2.274,461,2.773,496,4.706,583,3.145,1027,3.145,1042,3.71,1043,5.551,1044,4.938,1045,5.918,1046,6.163,1047,3.71,1048,4.938,1049,5.551,1050,3.71,1051,3.71,1052,6.163,1053,6.337,1054,6.337,1055,3.71,1056,4.938,1057,3.71,1058,3.71,1059,4.938,1060,3.71,1061,3.71,1062,3.71,1063,3.71,1064,3.71,1065,4.938,1066,4.938,1067,3.71,1068,3.71,1069,3.71,1070,5.551,1071,3.71,1072,3.71,1073,3.71,1074,3.71,1075,3.71,1076,3.71,1077,3.71,1078,5.551,1079,3.71,1080,3.71,1081,3.71,1082,3.71,1083,3.71,1084,3.71,1085,3.71,1086,3.71,1087,3.71,1088,3.71,1089,4.938,1090,5.551,1091,3.71,1092,3.71,1093,3.71,1094,3.71,1095,3.71,1096,3.71,1097,3.71,1098,6.337,1099,3.71,1100,4.938,1101,3.71,1102,3.71,1103,3.71,1104,3.71,1105,3.71,1106,3.71,1107,3.71,1108,3.71,1109,3.71,1110,3.71,1111,3.71,1112,3.71,1113,3.71,1114,3.71,1115,3.71,1116,2.773,1117,3.71,1118,3.71]],["title/modules.html",[1119,3.975]],["body/modules.html",[42,0.022,113,0.022,114,0.022,1119,4.693]],["title/overview.html",[1116,3.504]],["body/overview.html",[2,1.858,42,0.022,113,0.022,114,0.022,158,2.421,253,2.421,266,2.6,1116,4.023,1120,5.381,1121,5.381,1122,5.381,1123,5.381]],["title/properties.html",[29,0.271,1019,2.431]],["body/properties.html",[29,0.359,42,0.023,113,0.022,114,0.022,461,4.094,1124,5.477]],["title/miscellaneous/typealiases.html",[1125,1.929,1126,4.131]],["body/miscellaneous/typealiases.html",[28,0.303,42,0.023,44,0.443,113,0.022,114,0.022,710,4.154,720,3.967,721,3.967,722,3.967,913,3.967,1125,3.57,1127,5.307,1128,5.307]],["title/miscellaneous/variables.html",[1125,1.929,1129,3.502]],["body/miscellaneous/variables.html",[28,0.202,42,0.025,44,0.484,49,1.523,50,1.624,113,0.017,114,0.017,130,4.047,137,3.571,145,2.436,174,4.59,219,2.455,221,2.994,234,3.251,344,2.375,545,3.571,698,3.642,794,2.64,795,3.571,845,3.571,846,2.994,847,2.994,959,4.05,987,2.994,989,4.05,999,2.994,1000,4.05,1001,2.994,1002,4.05,1003,2.994,1004,4.05,1125,2.375,1129,2.994,1130,3.532,1131,3.532,1132,3.532,1133,3.532,1134,3.532,1135,4.778,1136,4.778,1137,4.778,1138,4.778,1139,3.532,1140,4.778,1141,3.532,1142,3.532,1143,3.532,1144,3.532,1145,3.532,1146,3.532,1147,3.532,1148,3.532,1149,3.532,1150,3.532,1151,3.532,1152,3.532,1153,3.532,1154,3.532,1155,3.532,1156,3.532,1157,3.532,1158,4.778,1159,3.532,1160,3.532,1161,3.532,1162,3.532,1163,3.532,1164,3.532,1165,3.532]]],"invertedIndex":[["",{"_index":42,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationRequest.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"classes/Role.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"components/UserBadgeComponent.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":507,"title":{},"body":{"injectables/BoardSocketService.html":{},"coverage.html":{}}}],["0.0.0",{"_index":1124,"title":{},"body":{"properties.html":{}}}],["0.15.0",{"_index":1039,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":990,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":991,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":993,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":994,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":997,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1005,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":996,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":986,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":998,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":995,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":992,"title":{},"body":{"coverage.html":{}}}],["1.2",{"_index":462,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["1.6.1",{"_index":1035,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1007,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1015,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":1120,"title":{},"body":{"overview.html":{}}}],["14",{"_index":1123,"title":{},"body":{"overview.html":{}}}],["16px",{"_index":671,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["19.0.0",{"_index":1022,"title":{},"body":{"dependencies.html":{}}}],["19.0.7",{"_index":1047,"title":{},"body":{"index.html":{}}}],["19.1.1",{"_index":1025,"title":{},"body":{"dependencies.html":{}}}],["1_000",{"_index":847,"title":{},"body":{"components/TaskEditorComponent.html":{},"miscellaneous/variables.html":{}}}],["2).replace(/\\0",{"_index":513,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["2.3.0",{"_index":1037,"title":{},"body":{"dependencies.html":{}}}],["25",{"_index":1014,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1006,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":846,"title":{},"body":{"components/TaskEditorComponent.html":{},"miscellaneous/variables.html":{}}}],["5.2.0",{"_index":1029,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1122,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":1031,"title":{},"body":{"dependencies.html":{}}}],["7.8.0",{"_index":1033,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1121,"title":{},"body":{"overview.html":{}}}],["800px",{"_index":377,"title":{},"body":{"components/BoardComponent.html":{}}}],["_currenttheme",{"_index":914,"title":{},"body":{"injectables/ThemeService.html":{}}}],["acc",{"_index":518,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["acc[key.trim",{"_index":522,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["accept",{"_index":460,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["accessors",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ThemeService.html":{}}}],["actions",{"_index":54,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["activatedroute",{"_index":303,"title":{},"body":{"components/BoardComponent.html":{}}}],["actual_component",{"_index":112,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["add",{"_index":883,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["addboard",{"_index":541,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["addcomment",{"_index":810,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["additional",{"_index":1108,"title":{},"body":{"index.html":{}}}],["admin",{"_index":17,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{},"injectables/UserService.html":{}}}],["admin_panel_settings",{"_index":78,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["admincomponentcomponent",{"_index":1,"title":{"components/AdminComponentComponent.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{},"coverage.html":{}}}],["adminguard",{"_index":1000,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["alias",{"_index":1016,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1127,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alloweddomains",{"_index":1147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angular",{"_index":1045,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1021,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/drag",{"_index":328,"title":{},"body":{"components/BoardComponent.html":{}}}],["angular/cdk/keycodes",{"_index":834,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["angular/cdk/text",{"_index":844,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["angular/common",{"_index":63,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/TaskEditorComponent.html":{},"injectables/ThemeService.html":{},"components/UserBadgeComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BoardService.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["angular/compiler",{"_index":1023,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":62,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"components/UserBadgeComponent.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":566,"title":{},"body":{"components/BoardsListComponent.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1024,"title":{},"body":{"dependencies.html":{}}}],["angular/material/autocomplete",{"_index":841,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["angular/material/button",{"_index":64,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["angular/material/card",{"_index":65,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{}}}],["angular/material/chips",{"_index":842,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["angular/material/dialog",{"_index":338,"title":{},"body":{"components/BoardComponent.html":{},"components/TaskEditorComponent.html":{}}}],["angular/material/form",{"_index":567,"title":{},"body":{"components/BoardsListComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["angular/material/grid",{"_index":148,"title":{},"body":{"components/AppComponent.html":{}}}],["angular/material/icon",{"_index":66,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/BoardsListComponent.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["angular/material/input",{"_index":569,"title":{},"body":{"components/BoardsListComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["angular/material/list",{"_index":150,"title":{},"body":{"components/AppComponent.html":{}}}],["angular/material/menu",{"_index":962,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["angular/material/select",{"_index":843,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["angular/material/sidenav",{"_index":151,"title":{},"body":{"components/AppComponent.html":{}}}],["angular/material/table",{"_index":67,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["angular/material/tabs",{"_index":570,"title":{},"body":{"components/BoardsListComponent.html":{},"components/SignInComponent.html":{}}}],["angular/material/toolbar",{"_index":571,"title":{},"body":{"components/BoardsListComponent.html":{},"components/HeaderComponent.html":{},"components/TaskEditorComponent.html":{}}}],["angular/platform",{"_index":1026,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":144,"title":{},"body":{"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/UserBadgeComponent.html":{},"dependencies.html":{}}}],["api",{"_index":256,"title":{},"body":{"interfaces/AuthenticationRequest.html":{},"interfaces/TaskPreviewDTO.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{}}}],["api/api/auth",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["api/auth.service",{"_index":961,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["api/boards",{"_index":410,"title":{},"body":{"injectables/BoardService.html":{}}}],["api/boards/${boardid}/users/${this.currentuservalue.id}/role",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["api/columns",{"_index":609,"title":{},"body":{"injectables/ColumnService.html":{}}}],["api/comments",{"_index":651,"title":{},"body":{"injectables/CommentService.html":{}}}],["api/tasks",{"_index":905,"title":{},"body":{"injectables/TaskService.html":{}}}],["api/users",{"_index":978,"title":{},"body":{"injectables/UserService.html":{}}}],["apiurl",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentService.html":{}}}],["app",{"_index":16,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["app.component.html",{"_index":122,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":123,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":86,"title":{"components/AppComponent.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":989,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":1059,"title":{},"body":{"index.html":{}}}],["applicationconfig",{"_index":1141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":389,"title":{},"body":{"interfaces/BoardDTO.html":{},"interfaces/ColumnDTO.html":{},"interfaces/TaskDTO.html":{}}}],["artifacts",{"_index":1082,"title":{},"body":{"index.html":{}}}],["assignee",{"_index":792,"title":{},"body":{"interfaces/TaskDTO.html":{}}}],["async",{"_index":296,"title":{},"body":{"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/TaskEditorComponent.html":{}}}],["asyncpipe",{"_index":23,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/TaskEditorComponent.html":{}}}],["auth.service",{"_index":469,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["auth0/angular",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["authenticationrequest",{"_index":252,"title":{"interfaces/AuthenticationRequest.html":{}},"body":{"interfaces/AuthenticationRequest.html":{},"coverage.html":{}}}],["authguard",{"_index":1002,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["authinterceptor",{"_index":1004,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["author",{"_index":618,"title":{},"body":{"classes/Comment.html":{},"interfaces/CommentDTO.html":{}}}],["authorization",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authservice",{"_index":145,"title":{"injectables/AuthService.html":{}},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"components/SignInComponent.html":{},"components/UserBadgeComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authservice.hasrole('admin",{"_index":580,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["authservice.hasrole(\\'admin",{"_index":585,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["authservice.isadmin",{"_index":1139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authservice.isauthenticated",{"_index":1138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authservice.token",{"_index":1160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auto",{"_index":258,"title":{},"body":{"interfaces/AuthenticationRequest.html":{},"interfaces/TaskPreviewDTO.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{}}}],["automatically",{"_index":1060,"title":{},"body":{"index.html":{}}}],["available",{"_index":1073,"title":{},"body":{"index.html":{}}}],["await",{"_index":373,"title":{},"body":{"components/BoardComponent.html":{},"components/TaskEditorComponent.html":{}}}],["background",{"_index":666,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["badge",{"_index":110,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["badge.component",{"_index":713,"title":{},"body":{"components/HeaderComponent.html":{}}}],["badge.component.html",{"_index":951,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["badge.component.scss",{"_index":952,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["badge.component.ts",{"_index":948,"title":{},"body":{"components/UserBadgeComponent.html":{},"coverage.html":{}}}],["badge.component.ts:23",{"_index":957,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["badge.component.ts:28",{"_index":956,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["badge.component.ts:32",{"_index":955,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["badge.component.ts:33",{"_index":958,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["badge.component.ts:34",{"_index":960,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["badge/user",{"_index":712,"title":{},"body":{"components/HeaderComponent.html":{},"components/UserBadgeComponent.html":{},"coverage.html":{}}}],["baseurl",{"_index":393,"title":{},"body":{"injectables/BoardService.html":{},"injectables/ColumnService.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["bearer",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["behaviorsubject",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"components/BoardsListComponent.html":{}}}],["behaviorsubject(null",{"_index":563,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["board",{"_index":141,"title":{"classes/Board.html":{}},"body":{"components/AppComponent.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"components/HeaderComponent.html":{},"coverage.html":{}}}],["board'},{'name",{"_index":89,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["board(e",{"_index":424,"title":{},"body":{"injectables/BoardService.html":{}}}],["board(e[0",{"_index":422,"title":{},"body":{"injectables/BoardService.html":{}}}],["board(el",{"_index":419,"title":{},"body":{"injectables/BoardService.html":{}}}],["board.columns",{"_index":384,"title":{},"body":{"components/BoardComponent.html":{}}}],["board.component.html",{"_index":291,"title":{},"body":{"components/BoardComponent.html":{}}}],["board.component.scss",{"_index":292,"title":{},"body":{"components/BoardComponent.html":{}}}],["board.id",{"_index":578,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["board.name",{"_index":579,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["boardcomponent",{"_index":88,"title":{"components/BoardComponent.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{},"coverage.html":{}}}],["boarddto",{"_index":269,"title":{"interfaces/BoardDTO.html":{}},"body":{"classes/Board.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"coverage.html":{}}}],["boardid",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"components/BoardComponent.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"injectables/TaskService.html":{}}}],["boardid}\\ndestination:/topic/board/${boardid}\\n\\n\\0",{"_index":489,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["boards",{"_index":91,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["boardservice",{"_index":302,"title":{"injectables/BoardService.html":{}},"body":{"components/BoardComponent.html":{},"injectables/BoardService.html":{},"components/BoardsListComponent.html":{},"coverage.html":{}}}],["boardslistcomponent",{"_index":90,"title":{"components/BoardsListComponent.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{},"coverage.html":{}}}],["boardsocketservice",{"_index":306,"title":{"injectables/BoardSocketService.html":{}},"body":{"components/BoardComponent.html":{},"injectables/BoardSocketService.html":{},"coverage.html":{}}}],["body",{"_index":498,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["boolean",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["browser",{"_index":1027,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["build",{"_index":1078,"title":{},"body":{"index.html":{}}}],["buildthis",{"_index":1079,"title":{},"body":{"index.html":{}}}],["c",{"_index":864,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["c.id",{"_index":865,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["canactivatefn",{"_index":1135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cancel",{"_index":884,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["candelete",{"_index":542,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["candelete(board.id",{"_index":581,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["candelete(boardid",{"_index":548,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["card",{"_index":665,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["cdkdrag",{"_index":289,"title":{},"body":{"components/BoardComponent.html":{}}}],["cdkdragdrop",{"_index":314,"title":{},"body":{"components/BoardComponent.html":{}}}],["cdkdroplist",{"_index":288,"title":{},"body":{"components/BoardComponent.html":{}}}],["cdkdroplistgroup",{"_index":287,"title":{},"body":{"components/BoardComponent.html":{}}}],["changedetection",{"_index":13,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["changedetectionstrategy",{"_index":60,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":14,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["choose",{"_index":1104,"title":{},"body":{"index.html":{}}}],["class",{"_index":70,"title":{"classes/Board.html":{},"classes/Column.html":{},"classes/Comment.html":{},"classes/Role.html":{},"classes/Task.html":{},"classes/TaskPreview.html":{},"classes/User.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationRequest.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"classes/Role.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"classes/Task.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"components/UserBadgeComponent.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["classes",{"_index":266,"title":{},"body":{"classes/Board.html":{},"classes/Column.html":{},"classes/Comment.html":{},"classes/Role.html":{},"classes/Task.html":{},"classes/TaskPreview.html":{},"classes/User.html":{},"overview.html":{}}}],["clear",{"_index":876,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["clearerror",{"_index":675,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["cli",{"_index":1046,"title":{},"body":{"index.html":{}}}],["client",{"_index":142,"title":{},"body":{"components/AppComponent.html":{},"dependencies.html":{}}}],["code",{"_index":1065,"title":{},"body":{"index.html":{}}}],["color",{"_index":667,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["column",{"_index":274,"title":{"classes/Column.html":{}},"body":{"classes/Board.html":{},"components/BoardComponent.html":{},"classes/Column.html":{},"injectables/ColumnService.html":{},"components/TaskEditorComponent.html":{},"coverage.html":{}}}],["column(e",{"_index":613,"title":{},"body":{"injectables/ColumnService.html":{}}}],["column(el",{"_index":612,"title":{},"body":{"injectables/ColumnService.html":{}}}],["column.name",{"_index":386,"title":{},"body":{"components/BoardComponent.html":{},"components/TaskEditorComponent.html":{}}}],["column.tasks",{"_index":387,"title":{},"body":{"components/BoardComponent.html":{}}}],["columndto",{"_index":390,"title":{"interfaces/ColumnDTO.html":{}},"body":{"interfaces/BoardDTO.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"coverage.html":{}}}],["columnid",{"_index":309,"title":{},"body":{"components/BoardComponent.html":{},"injectables/TaskService.html":{}}}],["columns",{"_index":270,"title":{},"body":{"classes/Board.html":{},"interfaces/BoardDTO.html":{},"components/BoardsListComponent.html":{}}}],["columnservice",{"_index":597,"title":{"injectables/ColumnService.html":{}},"body":{"injectables/ColumnService.html":{},"coverage.html":{}}}],["come",{"_index":1102,"title":{},"body":{"index.html":{}}}],["comma",{"_index":831,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["command",{"_index":496,"title":{},"body":{"injectables/BoardSocketService.html":{},"index.html":{}}}],["comment",{"_index":615,"title":{"classes/Comment.html":{}},"body":{"classes/Comment.html":{},"injectables/CommentService.html":{},"components/TaskEditorComponent.html":{},"coverage.html":{}}}],["comment(e",{"_index":658,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment(el",{"_index":655,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.author.username",{"_index":878,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["comment.content",{"_index":882,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["comment.createdat",{"_index":879,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["comment.id",{"_index":866,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["commentdto",{"_index":617,"title":{"interfaces/CommentDTO.html":{}},"body":{"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"coverage.html":{}}}],["comments",{"_index":381,"title":{},"body":{"components/BoardComponent.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{}}}],["comments_update_timeout_s",{"_index":845,"title":{},"body":{"components/TaskEditorComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commentservice",{"_index":639,"title":{"injectables/CommentService.html":{}},"body":{"injectables/CommentService.html":{},"components/TaskEditorComponent.html":{},"coverage.html":{}}}],["compile",{"_index":1080,"title":{},"body":{"index.html":{}}}],["complete",{"_index":1072,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{},"coverage.html":{},"index.html":{}}}],["component'},{'name",{"_index":85,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["component.component.html",{"_index":25,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["component.component.scss",{"_index":27,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["component.component.ts",{"_index":11,"title":{},"body":{"components/AdminComponentComponent.html":{},"coverage.html":{}}}],["component.component.ts:23",{"_index":55,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["component.component.ts:24",{"_index":58,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["component.component.ts:25",{"_index":37,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["component.component.ts:29",{"_index":40,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["component/admin",{"_index":10,"title":{},"body":{"components/AdminComponentComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":84,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{},"index.html":{},"overview.html":{}}}],["components/taks",{"_index":339,"title":{},"body":{"components/BoardComponent.html":{}}}],["components/task",{"_index":343,"title":{},"body":{"components/BoardComponent.html":{}}}],["config",{"_index":1145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":433,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["connect(boardid",{"_index":442,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["connect\\n${this.objecttostompheaders(this.stompheaders)}\\n\\n\\0",{"_index":483,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["console.log('createcomment",{"_index":656,"title":{},"body":{"injectables/CommentService.html":{}}}],["console.log('delitetask",{"_index":378,"title":{},"body":{"components/BoardComponent.html":{}}}],["console.log('onlogin",{"_index":966,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["console.log('onlogout",{"_index":963,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["console.log('onsignin",{"_index":755,"title":{},"body":{"components/SignInComponent.html":{}}}],["console.log('response",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('value",{"_index":859,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["console.log(123",{"_index":133,"title":{},"body":{"components/AppComponent.html":{}}}],["console.log(e",{"_index":360,"title":{},"body":{"components/BoardComponent.html":{}}}],["console.log(user",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"injectables/ColumnService.html":{},"components/TaskEditorComponent.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":35,"title":{},"body":{"components/AdminComponentComponent.html":{},"injectables/AuthService.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"classes/Task.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":440,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["constructor(boardservice",{"_index":301,"title":{},"body":{"components/BoardComponent.html":{}}}],["constructor(data",{"_index":271,"title":{},"body":{"classes/Board.html":{},"classes/Column.html":{},"classes/Comment.html":{},"classes/Task.html":{},"classes/TaskPreview.html":{},"classes/User.html":{}}}],["constructor(document",{"_index":918,"title":{},"body":{"injectables/ThemeService.html":{}}}],["constructor(fb",{"_index":741,"title":{},"body":{"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["constructor(http",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["constructor(httpclient",{"_index":399,"title":{},"body":{"injectables/BoardService.html":{}}}],["constructor(private",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"components/HeaderComponent.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["constructor(router",{"_index":544,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["constructor(theme",{"_index":693,"title":{},"body":{"components/HeaderComponent.html":{}}}],["content",{"_index":619,"title":{},"body":{"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"components/TaskEditorComponent.html":{}}}],["core/api/auth.service",{"_index":146,"title":{},"body":{"components/AppComponent.html":{},"components/BoardsListComponent.html":{},"components/SignInComponent.html":{}}}],["core/api/board",{"_index":336,"title":{},"body":{"components/BoardComponent.html":{}}}],["core/api/board.service",{"_index":335,"title":{},"body":{"components/BoardComponent.html":{},"components/BoardsListComponent.html":{}}}],["core/api/comment.service",{"_index":840,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["core/api/task.service",{"_index":346,"title":{},"body":{"components/BoardComponent.html":{},"components/TaskEditorComponent.html":{}}}],["core/api/user.service",{"_index":68,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["core/components/header/header.component",{"_index":147,"title":{},"body":{"components/AppComponent.html":{}}}],["core/models/classes/board",{"_index":334,"title":{},"body":{"components/BoardComponent.html":{}}}],["core/models/classes/comment",{"_index":839,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["core/models/classes/task",{"_index":342,"title":{},"body":{"components/BoardComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{}}}],["coverage",{"_index":982,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":584,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["createboard",{"_index":394,"title":{},"body":{"injectables/BoardService.html":{},"components/BoardsListComponent.html":{}}}],["createboard(board",{"_index":401,"title":{},"body":{"injectables/BoardService.html":{}}}],["createcolumn",{"_index":599,"title":{},"body":{"injectables/ColumnService.html":{}}}],["createcolumn(column",{"_index":603,"title":{},"body":{"injectables/ColumnService.html":{}}}],["createcomment",{"_index":641,"title":{},"body":{"injectables/CommentService.html":{},"components/TaskEditorComponent.html":{}}}],["createcomment(comment",{"_index":645,"title":{},"body":{"injectables/CommentService.html":{}}}],["createdat",{"_index":620,"title":{},"body":{"classes/Comment.html":{},"interfaces/CommentDTO.html":{}}}],["createdby",{"_index":793,"title":{},"body":{"interfaces/TaskDTO.html":{}}}],["createrandomboard",{"_index":395,"title":{},"body":{"injectables/BoardService.html":{},"components/BoardsListComponent.html":{}}}],["createtask",{"_index":294,"title":{},"body":{"components/BoardComponent.html":{},"injectables/TaskService.html":{}}}],["createtask(boardid",{"_index":308,"title":{},"body":{"components/BoardComponent.html":{}}}],["createtask(task",{"_index":896,"title":{},"body":{"injectables/TaskService.html":{}}}],["current",{"_index":131,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{}}}],["currentboard",{"_index":315,"title":{},"body":{"components/BoardComponent.html":{}}}],["currentboard.id.tostring",{"_index":372,"title":{},"body":{"components/BoardComponent.html":{}}}],["currenttheme",{"_index":917,"title":{},"body":{"injectables/ThemeService.html":{}}}],["currentuser",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{}}}],["currentusersubject",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentuservalue",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["d32f2f",{"_index":669,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["dark",{"_index":721,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/ThemeService.html":{},"miscellaneous/typealiases.html":{}}}],["data",{"_index":273,"title":{},"body":{"classes/Board.html":{},"components/BoardComponent.html":{},"classes/Column.html":{},"classes/Comment.html":{},"classes/Task.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"classes/User.html":{}}}],["data.columns",{"_index":283,"title":{},"body":{"classes/Board.html":{}}}],["data.comments",{"_index":790,"title":{},"body":{"classes/Task.html":{}}}],["data.content",{"_index":630,"title":{},"body":{"classes/Comment.html":{}}}],["data.createdat",{"_index":632,"title":{},"body":{"classes/Comment.html":{}}}],["data.description",{"_index":788,"title":{},"body":{"classes/Task.html":{}}}],["data.id",{"_index":279,"title":{},"body":{"classes/Board.html":{},"classes/Column.html":{},"classes/Comment.html":{},"classes/Task.html":{},"classes/TaskPreview.html":{},"classes/User.html":{}}}],["data.name",{"_index":281,"title":{},"body":{"classes/Board.html":{},"classes/Column.html":{},"classes/User.html":{}}}],["data.task.description",{"_index":850,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["data.task.title",{"_index":849,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["data.taskid",{"_index":636,"title":{},"body":{"classes/Comment.html":{}}}],["data.tasks",{"_index":594,"title":{},"body":{"classes/Column.html":{}}}],["data.title",{"_index":786,"title":{},"body":{"classes/Task.html":{},"classes/TaskPreview.html":{}}}],["data.username",{"_index":946,"title":{},"body":{"classes/User.html":{}}}],["date",{"_index":625,"title":{},"body":{"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"components/TaskEditorComponent.html":{}}}],["datepipe",{"_index":798,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["decorators",{"_index":825,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["default",{"_index":49,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/TaskEditorComponent.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"components/UserBadgeComponent.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":36,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"classes/Task.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"components/UserBadgeComponent.html":{},"injectables/UserService.html":{}}}],["delay",{"_index":855,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["delete",{"_index":582,"title":{},"body":{"components/BoardsListComponent.html":{},"components/TaksPreviewComponent.html":{}}}],["deleteboard",{"_index":396,"title":{},"body":{"injectables/BoardService.html":{},"components/BoardsListComponent.html":{}}}],["deleteboard(boardid",{"_index":550,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["deleteboard(id",{"_index":405,"title":{},"body":{"injectables/BoardService.html":{}}}],["deletecolumn",{"_index":600,"title":{},"body":{"injectables/ColumnService.html":{}}}],["deletecolumn(id",{"_index":605,"title":{},"body":{"injectables/ColumnService.html":{}}}],["deletecomment",{"_index":642,"title":{},"body":{"injectables/CommentService.html":{}}}],["deletecomment(id",{"_index":647,"title":{},"body":{"injectables/CommentService.html":{}}}],["deletetask",{"_index":772,"title":{},"body":{"components/TaksPreviewComponent.html":{},"injectables/TaskService.html":{}}}],["deletetask(id",{"_index":898,"title":{},"body":{"injectables/TaskService.html":{}}}],["delitetask",{"_index":295,"title":{},"body":{"components/BoardComponent.html":{}}}],["delitetask(id",{"_index":311,"title":{},"body":{"components/BoardComponent.html":{}}}],["dependencies",{"_index":1020,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":255,"title":{},"body":{"interfaces/AuthenticationRequest.html":{},"components/BoardComponent.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{},"interfaces/TaskPreviewDTO.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{}}}],["deserializer",{"_index":477,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["destroy",{"_index":293,"title":{},"body":{"components/BoardComponent.html":{}}}],["detailed",{"_index":1113,"title":{},"body":{"index.html":{}}}],["development",{"_index":1048,"title":{},"body":{"index.html":{}}}],["dialogref",{"_index":806,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["directive",{"_index":82,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["directives",{"_index":111,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{},"index.html":{}}}],["directory",{"_index":1084,"title":{},"body":{"index.html":{}}}],["disallowedroutes",{"_index":1149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disconnect",{"_index":434,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["dismiss",{"_index":674,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["display",{"_index":664,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["display'},{'name",{"_index":95,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["display.component.ts",{"_index":663,"title":{},"body":{"components/ErrorDisplayComponent.html":{},"coverage.html":{}}}],["display.component.ts:35",{"_index":679,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["display.component.ts:37",{"_index":676,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["display/error",{"_index":662,"title":{},"body":{"components/ErrorDisplayComponent.html":{},"coverage.html":{}}}],["displayedcolumns",{"_index":30,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["dist",{"_index":1083,"title":{},"body":{"index.html":{}}}],["divider",{"_index":508,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["document",{"_index":919,"title":{},"body":{"injectables/ThemeService.html":{}}}],["documentation",{"_index":983,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["drop",{"_index":297,"title":{},"body":{"components/BoardComponent.html":{}}}],["drop(event",{"_index":313,"title":{},"body":{"components/BoardComponent.html":{}}}],["dynamic",{"_index":1028,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":478,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["e.data",{"_index":479,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["e.includes('admin",{"_index":573,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["e.map((el",{"_index":418,"title":{},"body":{"injectables/BoardService.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{}}}],["e2e",{"_index":1099,"title":{},"body":{"index.html":{}}}],["e2eangular",{"_index":1101,"title":{},"body":{"index.html":{}}}],["edit",{"_index":264,"title":{},"body":{"interfaces/AuthenticationRequest.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"interfaces/TaskPreviewDTO.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{}}}],["editor",{"_index":796,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["editor'},{'name",{"_index":108,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["editor.component",{"_index":345,"title":{},"body":{"components/BoardComponent.html":{}}}],["editor.component.html",{"_index":804,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["editor.component.scss",{"_index":805,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["editor.component.ts",{"_index":795,"title":{},"body":{"components/TaskEditorComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["editor.component.ts:106",{"_index":823,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["editor.component.ts:112",{"_index":821,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["editor.component.ts:124",{"_index":819,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["editor.component.ts:60",{"_index":833,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["editor.component.ts:61",{"_index":829,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["editor.component.ts:62",{"_index":832,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["editor.component.ts:63",{"_index":817,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["editor.component.ts:69",{"_index":828,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["editor.component.ts:70",{"_index":827,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["editor.component.ts:83",{"_index":820,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["editor.component.ts:87",{"_index":824,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["editor.component.ts:91",{"_index":818,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["editor/task",{"_index":344,"title":{},"body":{"components/BoardComponent.html":{},"components/TaskEditorComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["edittask",{"_index":298,"title":{},"body":{"components/BoardComponent.html":{},"components/TaksPreviewComponent.html":{}}}],["edittask(id",{"_index":319,"title":{},"body":{"components/BoardComponent.html":{}}}],["element",{"_index":81,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["end",{"_index":1098,"title":{},"body":{"index.html":{}}}],["enter",{"_index":830,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["error",{"_index":94,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["errordisplaycomponent",{"_index":93,"title":{"components/ErrorDisplayComponent.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{},"coverage.html":{}}}],["errormessage",{"_index":673,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["event",{"_index":317,"title":{},"body":{"components/BoardComponent.html":{},"components/HeaderComponent.html":{}}}],["event.container",{"_index":366,"title":{},"body":{"components/BoardComponent.html":{}}}],["event.container.data",{"_index":367,"title":{},"body":{"components/BoardComponent.html":{}}}],["event.currentindex",{"_index":369,"title":{},"body":{"components/BoardComponent.html":{}}}],["event.previouscontainer",{"_index":365,"title":{},"body":{"components/BoardComponent.html":{}}}],["event.previouscontainer.data",{"_index":370,"title":{},"body":{"components/BoardComponent.html":{}}}],["event.previousindex",{"_index":368,"title":{},"body":{"components/BoardComponent.html":{}}}],["eventcoalescing",{"_index":1152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":1053,"title":{},"body":{"index.html":{}}}],["example.com",{"_index":1148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["execute",{"_index":1091,"title":{},"body":{"index.html":{}}}],["export",{"_index":69,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationRequest.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"classes/Role.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"components/UserBadgeComponent.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"injectables/UserService.html":{}}}],["false",{"_index":137,"title":{},"body":{"components/AppComponent.html":{},"components/TaskEditorComponent.html":{},"miscellaneous/variables.html":{}}}],["fb",{"_index":744,"title":{},"body":{"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["ffebee",{"_index":668,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["field",{"_index":568,"title":{},"body":{"components/BoardsListComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationRequest.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"classes/Role.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"components/UserBadgeComponent.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["files",{"_index":1064,"title":{},"body":{"index.html":{}}}],["filter",{"_index":466,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["filter((message",{"_index":493,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["firstvaluefrom",{"_index":329,"title":{},"body":{"components/BoardComponent.html":{},"components/TaskEditorComponent.html":{}}}],["firstvaluefrom(this.taskservice.gettasksbyid(id",{"_index":374,"title":{},"body":{"components/BoardComponent.html":{}}}],["firstvaluefrom(this.taskservice.updatetask(updatedtask",{"_index":872,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["following",{"_index":1096,"title":{},"body":{"index.html":{}}}],["formbuilder",{"_index":742,"title":{},"body":{"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["formcontrol",{"_index":708,"title":{},"body":{"components/HeaderComponent.html":{}}}],["formcontrol('light",{"_index":705,"title":{},"body":{"components/HeaderComponent.html":{}}}],["formgroup",{"_index":747,"title":{},"body":{"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["formsmodule",{"_index":533,"title":{},"body":{"components/BoardsListComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["found",{"_index":727,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found'},{'name",{"_index":99,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["found.component.html",{"_index":728,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.scss",{"_index":729,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.ts",{"_index":726,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["found/not",{"_index":725,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["frame",{"_index":481,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["framework",{"_index":1103,"title":{},"body":{"index.html":{}}}],["generate",{"_index":1070,"title":{},"body":{"index.html":{}}}],["generated",{"_index":259,"title":{},"body":{"interfaces/AuthenticationRequest.html":{},"interfaces/TaskPreviewDTO.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"index.html":{}}}],["generator",{"_index":261,"title":{},"body":{"interfaces/AuthenticationRequest.html":{},"interfaces/TaskPreviewDTO.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{}}}],["generator.tech",{"_index":263,"title":{},"body":{"interfaces/AuthenticationRequest.html":{},"interfaces/TaskPreviewDTO.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{}}}],["get(`${this.apiurl}/task/${taskid",{"_index":654,"title":{},"body":{"injectables/CommentService.html":{}}}],["get(`${this.baseurl}/${id",{"_index":909,"title":{},"body":{"injectables/TaskService.html":{}}}],["get(this.baseurl",{"_index":416,"title":{},"body":{"injectables/BoardService.html":{},"injectables/ColumnService.html":{},"injectables/TaskService.html":{}}}],["getallboards",{"_index":397,"title":{},"body":{"injectables/BoardService.html":{}}}],["getallcolumns",{"_index":601,"title":{},"body":{"injectables/ColumnService.html":{}}}],["getallcolumns(id",{"_index":607,"title":{},"body":{"injectables/ColumnService.html":{}}}],["getalltasks",{"_index":892,"title":{},"body":{"injectables/TaskService.html":{}}}],["getallusers",{"_index":974,"title":{},"body":{"injectables/UserService.html":{}}}],["getboardbyid",{"_index":398,"title":{},"body":{"injectables/BoardService.html":{}}}],["getboardbyid(id",{"_index":408,"title":{},"body":{"injectables/BoardService.html":{}}}],["getboardroles",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["getboardroles(boardid",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"components/BoardsListComponent.html":{}}}],["getcomments",{"_index":643,"title":{},"body":{"injectables/CommentService.html":{}}}],["getcomments(data.task.id",{"_index":853,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["getcomments(taskid",{"_index":649,"title":{},"body":{"injectables/CommentService.html":{}}}],["getcurrenttheme",{"_index":929,"title":{},"body":{"injectables/ThemeService.html":{}}}],["getcurrentuservalue",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["getroles",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettasksbyid",{"_index":893,"title":{},"body":{"injectables/TaskService.html":{}}}],["gettasksbyid(id",{"_index":901,"title":{},"body":{"injectables/TaskService.html":{}}}],["getting",{"_index":1040,"title":{"index.html":{}},"body":{}}],["gettoken",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasrole",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasrole(role",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["header",{"_index":683,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header'},{'name",{"_index":97,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["header.component.html",{"_index":685,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header.component.scss",{"_index":686,"title":{},"body":{"components/HeaderComponent.html":{}}}],["headercomponent",{"_index":96,"title":{"components/HeaderComponent.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{},"coverage.html":{}}}],["headerobj",{"_index":516,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["headers",{"_index":497,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["headers.reduce",{"_index":517,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["headers.shift",{"_index":515,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["headersection",{"_index":510,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["headersection.split('\\n",{"_index":514,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["helpbuilding",{"_index":1077,"title":{},"body":{"index.html":{}}}],["helper",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["hh:mm",{"_index":881,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["host",{"_index":463,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["html",{"_index":80,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["http",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["http://example.com/examplebadroute",{"_index":1150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:4200",{"_index":1058,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BoardService.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["httpinterceptorfn",{"_index":1157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpparams",{"_index":411,"title":{},"body":{"injectables/BoardService.html":{},"injectables/ColumnService.html":{}}}],["httpparams().set('id",{"_index":426,"title":{},"body":{"injectables/BoardService.html":{},"injectables/ColumnService.html":{}}}],["https://openapi",{"_index":262,"title":{},"body":{"interfaces/AuthenticationRequest.html":{},"interfaces/TaskPreviewDTO.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{}}}],["id",{"_index":51,"title":{},"body":{"components/AdminComponentComponent.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"interfaces/UserDTO.html":{}}}],["id.tostring",{"_index":427,"title":{},"body":{"injectables/BoardService.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{}}}],["identifier",{"_index":984,"title":{},"body":{"coverage.html":{}}}],["if(isloggedin",{"_index":723,"title":{},"body":{"components/HeaderComponent.html":{}}}],["if(user",{"_index":967,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["implements",{"_index":268,"title":{},"body":{"classes/Board.html":{},"components/BoardComponent.html":{},"classes/Column.html":{},"classes/Comment.html":{},"components/HeaderComponent.html":{},"classes/Task.html":{},"classes/TaskPreview.html":{},"classes/User.html":{}}}],["import",{"_index":59,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"components/UserBadgeComponent.html":{},"injectables/UserService.html":{}}}],["importprovidersfrom",{"_index":1143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imports",{"_index":18,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["in'},{'name",{"_index":102,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["in.component.html",{"_index":735,"title":{},"body":{"components/SignInComponent.html":{}}}],["in.component.scss",{"_index":736,"title":{},"body":{"components/SignInComponent.html":{}}}],["in.component.ts",{"_index":734,"title":{},"body":{"components/SignInComponent.html":{},"coverage.html":{}}}],["in.component.ts:35",{"_index":748,"title":{},"body":{"components/SignInComponent.html":{}}}],["in.component.ts:36",{"_index":743,"title":{},"body":{"components/SignInComponent.html":{}}}],["in.component.ts:54",{"_index":745,"title":{},"body":{"components/SignInComponent.html":{}}}],["in.component.ts:68",{"_index":746,"title":{},"body":{"components/SignInComponent.html":{}}}],["in/sign",{"_index":733,"title":{},"body":{"components/SignInComponent.html":{},"coverage.html":{}}}],["includes",{"_index":1067,"title":{},"body":{"index.html":{}}}],["including",{"_index":1112,"title":{},"body":{"index.html":{}}}],["index",{"_index":28,"title":{"index.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationRequest.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"components/UserBadgeComponent.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationRequest.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"classes/Role.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"components/UserBadgeComponent.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"injectables/UserService.html":{}}}],["information",{"_index":1111,"title":{},"body":{"index.html":{}}}],["initialboard",{"_index":351,"title":{},"body":{"components/BoardComponent.html":{}}}],["inject",{"_index":61,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardsListComponent.html":{},"components/TaskEditorComponent.html":{},"injectables/ThemeService.html":{},"components/UserBadgeComponent.html":{}}}],["inject(authservice",{"_index":130,"title":{},"body":{"components/AppComponent.html":{},"components/UserBadgeComponent.html":{},"miscellaneous/variables.html":{}}}],["inject(authservice).isadmin",{"_index":135,"title":{},"body":{"components/AppComponent.html":{}}}],["inject(boardservice",{"_index":560,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["inject(document",{"_index":932,"title":{},"body":{"injectables/ThemeService.html":{}}}],["inject(mat_dialog_data",{"_index":826,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["inject(router",{"_index":959,"title":{},"body":{"components/UserBadgeComponent.html":{},"miscellaneous/variables.html":{}}}],["inject(userservice",{"_index":57,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["injectable",{"_index":157,"title":{"injectables/AuthService.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["input",{"_index":680,"title":{},"body":{"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/TaksPreviewComponent.html":{},"components/UserBadgeComponent.html":{}}}],["input('error",{"_index":677,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["input.required",{"_index":714,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaksPreviewComponent.html":{},"components/UserBadgeComponent.html":{}}}],["inputs",{"_index":691,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaksPreviewComponent.html":{},"components/UserBadgeComponent.html":{}}}],["interface",{"_index":251,"title":{"interfaces/AuthenticationRequest.html":{},"interfaces/BoardDTO.html":{},"interfaces/ColumnDTO.html":{},"interfaces/CommentDTO.html":{},"interfaces/TaskDTO.html":{},"interfaces/TaskPreviewDTO.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{}},"body":{"interfaces/AuthenticationRequest.html":{},"interfaces/BoardDTO.html":{},"interfaces/ColumnDTO.html":{},"interfaces/CommentDTO.html":{},"interfaces/TaskDTO.html":{},"interfaces/TaskPreviewDTO.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"coverage.html":{}}}],["interfaces",{"_index":253,"title":{},"body":{"interfaces/AuthenticationRequest.html":{},"interfaces/BoardDTO.html":{},"interfaces/ColumnDTO.html":{},"interfaces/CommentDTO.html":{},"interfaces/TaskDTO.html":{},"interfaces/TaskPreviewDTO.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"overview.html":{}}}],["isadmin",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{}}}],["isauthenticated",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["iseditdescription",{"_index":807,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["isloggedin",{"_index":687,"title":{},"body":{"components/HeaderComponent.html":{}}}],["issidenavopen",{"_index":126,"title":{},"body":{"components/AppComponent.html":{}}}],["join('\\n",{"_index":527,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["json.parse(body",{"_index":500,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["json.parse(localstorage.getitem('currentuser",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["json.stringify(user",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["jsonmanagedreference",{"_index":575,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["jsonpipe",{"_index":949,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["jwt",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["jwthelperservice",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtmodule.forroot",{"_index":1144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kanban",{"_index":140,"title":{},"body":{"components/AppComponent.html":{},"interfaces/AuthenticationRequest.html":{},"components/HeaderComponent.html":{},"interfaces/TaskPreviewDTO.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{}}}],["kanbanboardclientapp",{"_index":1042,"title":{},"body":{"index.html":{}}}],["karma",{"_index":1092,"title":{},"body":{"index.html":{}}}],["key",{"_index":520,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["key}:${value",{"_index":526,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["legend",{"_index":79,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["light",{"_index":720,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/ThemeService.html":{},"miscellaneous/typealiases.html":{}}}],["line",{"_index":519,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["line.split",{"_index":521,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["list",{"_index":149,"title":{},"body":{"components/AppComponent.html":{},"components/BoardsListComponent.html":{},"index.html":{}}}],["list'},{'name",{"_index":92,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["list.component.html",{"_index":537,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["list.component.scss",{"_index":538,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["list.component.ts",{"_index":530,"title":{},"body":{"components/BoardsListComponent.html":{},"coverage.html":{}}}],["list.component.ts:43",{"_index":564,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["list.component.ts:44",{"_index":561,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["list.component.ts:45",{"_index":559,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["list.component.ts:50",{"_index":546,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["list.component.ts:55",{"_index":554,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["list.component.ts:58",{"_index":549,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["list.component.ts:64",{"_index":547,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["list.component.ts:76",{"_index":553,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["list.component.ts:80",{"_index":551,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["list/boards",{"_index":529,"title":{},"body":{"components/BoardsListComponent.html":{},"coverage.html":{}}}],["listenforupdates",{"_index":435,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["literal",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentService.html":{},"components/TaskEditorComponent.html":{}}}],["loading",{"_index":539,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["local",{"_index":1051,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":464,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["localstorage.getitem('access_token",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["localstorage.getitem('theme",{"_index":935,"title":{},"body":{"injectables/ThemeService.html":{}}}],["localstorage.removeitem('access_token",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.removeitem('currentuser",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.setitem('access_token",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.setitem('currentuser",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.setitem('theme",{"_index":936,"title":{},"body":{"injectables/ThemeService.html":{}}}],["login",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"components/UserBadgeComponent.html":{}}}],["login(user",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"components/UserBadgeComponent.html":{}}}],["management",{"_index":73,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["manually",{"_index":265,"title":{},"body":{"interfaces/AuthenticationRequest.html":{},"interfaces/TaskPreviewDTO.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{}}}],["map",{"_index":330,"title":{},"body":{"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{}}}],["map(([key",{"_index":525,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["map((message",{"_index":495,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["map((params",{"_index":349,"title":{},"body":{"components/BoardComponent.html":{}}}],["margin",{"_index":670,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["markdown",{"_index":837,"title":{},"body":{"components/TaskEditorComponent.html":{},"dependencies.html":{}}}],["markdowncomponent",{"_index":801,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["markdownmodule",{"_index":802,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["mat_dialog_data",{"_index":838,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["matautocompletemodule",{"_index":800,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["matbuttonmodule",{"_index":20,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["matbuttontogglechange",{"_index":703,"title":{},"body":{"components/HeaderComponent.html":{}}}],["matbuttontogglemodule",{"_index":684,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskEditorComponent.html":{}}}],["matcardmodule",{"_index":19,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{}}}],["matching",{"_index":114,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationRequest.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"classes/Role.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"components/UserBadgeComponent.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchipsmodule",{"_index":799,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["matdialog",{"_index":304,"title":{},"body":{"components/BoardComponent.html":{}}}],["matdialogmodule",{"_index":290,"title":{},"body":{"components/BoardComponent.html":{},"components/TaskEditorComponent.html":{}}}],["matdialogref",{"_index":816,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["matformfieldmodule",{"_index":532,"title":{},"body":{"components/BoardsListComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["matgridlistmodule",{"_index":118,"title":{},"body":{"components/AppComponent.html":{}}}],["maticonmodule",{"_index":21,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/BoardsListComponent.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["matinputmodule",{"_index":534,"title":{},"body":{"components/BoardsListComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["matlistmodule",{"_index":120,"title":{},"body":{"components/AppComponent.html":{}}}],["matmenumodule",{"_index":950,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["matselectmodule",{"_index":797,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["matsidenavmodule",{"_index":119,"title":{},"body":{"components/AppComponent.html":{}}}],["mattablemodule",{"_index":22,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["mattabsmodule",{"_index":531,"title":{},"body":{"components/BoardsListComponent.html":{},"components/SignInComponent.html":{}}}],["mattoolbarmodule",{"_index":536,"title":{},"body":{"components/BoardsListComponent.html":{},"components/HeaderComponent.html":{},"components/TaskEditorComponent.html":{}}}],["menu",{"_index":719,"title":{},"body":{"components/HeaderComponent.html":{}}}],["merge",{"_index":331,"title":{},"body":{"components/BoardComponent.html":{}}}],["message.startswith('connected",{"_index":505,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["message.startswith('message",{"_index":494,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["metadata",{"_index":12,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["methods",{"_index":33,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"components/UserBadgeComponent.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":1125,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["models/classes/board",{"_index":412,"title":{},"body":{"injectables/BoardService.html":{}}}],["models/classes/column",{"_index":610,"title":{},"body":{"injectables/ColumnService.html":{}}}],["models/classes/comment",{"_index":652,"title":{},"body":{"injectables/CommentService.html":{}}}],["models/classes/task",{"_index":906,"title":{},"body":{"injectables/TaskService.html":{}}}],["models/classes/user",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"components/HeaderComponent.html":{},"components/UserBadgeComponent.html":{},"injectables/UserService.html":{}}}],["models/requestmodels/model/boarddto",{"_index":413,"title":{},"body":{"injectables/BoardService.html":{}}}],["models/requestmodels/model/columndto",{"_index":611,"title":{},"body":{"injectables/ColumnService.html":{}}}],["models/requestmodels/model/commentdto",{"_index":653,"title":{},"body":{"injectables/CommentService.html":{}}}],["models/requestmodels/model/models",{"_index":907,"title":{},"body":{"injectables/TaskService.html":{}}}],["modify",{"_index":1063,"title":{},"body":{"index.html":{}}}],["modules",{"_index":1119,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":1110,"title":{},"body":{"index.html":{}}}],["moveiteminarray",{"_index":326,"title":{},"body":{"components/BoardComponent.html":{}}}],["msg",{"_index":476,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["name",{"_index":43,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"classes/Task.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"components/UserBadgeComponent.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"injectables/UserService.html":{}}}],["namefor",{"_index":1071,"title":{},"body":{"index.html":{}}}],["navigate",{"_index":1057,"title":{},"body":{"index.html":{}}}],["needs",{"_index":1107,"title":{},"body":{"index.html":{}}}],["new",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"components/BoardsListComponent.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"components/HeaderComponent.html":{},"injectables/TaskService.html":{},"coverage.html":{},"index.html":{}}}],["newcomment",{"_index":851,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["next",{"_index":1159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["next(req",{"_index":1165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ng",{"_index":1054,"title":{},"body":{"index.html":{}}}],["ngondestroy",{"_index":299,"title":{},"body":{"components/BoardComponent.html":{}}}],["ngoninit",{"_index":300,"title":{},"body":{"components/BoardComponent.html":{},"components/HeaderComponent.html":{}}}],["ngx",{"_index":836,"title":{},"body":{"components/TaskEditorComponent.html":{},"dependencies.html":{}}}],["note",{"_index":257,"title":{},"body":{"interfaces/AuthenticationRequest.html":{},"interfaces/TaskPreviewDTO.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{}}}],["notfoundcomponent",{"_index":98,"title":{"components/NotFoundComponent.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{},"coverage.html":{}}}],["null",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BoardService.html":{},"components/ErrorDisplayComponent.html":{},"injectables/ThemeService.html":{}}}],["number",{"_index":39,"title":{},"body":{"components/AdminComponentComponent.html":{},"injectables/AuthService.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"interfaces/UserDTO.html":{},"injectables/UserService.html":{}}}],["obj",{"_index":449,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["object",{"_index":459,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["object.entries(obj",{"_index":524,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["objecttostompheaders",{"_index":436,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["objecttostompheaders(obj",{"_index":446,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["observable",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"components/TaskEditorComponent.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["oncancel",{"_index":811,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["oncleartitle",{"_index":812,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["ondestroy",{"_index":286,"title":{},"body":{"components/BoardComponent.html":{}}}],["one",{"_index":1105,"title":{},"body":{"index.html":{}}}],["oninit",{"_index":285,"title":{},"body":{"components/BoardComponent.html":{},"components/HeaderComponent.html":{}}}],["onlogin",{"_index":953,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["onlogout",{"_index":954,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["onsave",{"_index":813,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["onsignin",{"_index":739,"title":{},"body":{"components/SignInComponent.html":{}}}],["onsignup",{"_index":740,"title":{},"body":{"components/SignInComponent.html":{}}}],["open",{"_index":583,"title":{},"body":{"components/BoardsListComponent.html":{},"index.html":{}}}],["openapi",{"_index":260,"title":{},"body":{"interfaces/AuthenticationRequest.html":{},"interfaces/TaskPreviewDTO.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{}}}],["openboard",{"_index":543,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["openboard(boardid",{"_index":552,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["opensidenav",{"_index":688,"title":{},"body":{"components/HeaderComponent.html":{}}}],["optimizes",{"_index":1086,"title":{},"body":{"index.html":{}}}],["optional",{"_index":45,"title":{},"body":{"components/AdminComponentComponent.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationRequest.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"injectables/UserService.html":{}}}],["output",{"_index":707,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaksPreviewComponent.html":{}}}],["outputs",{"_index":692,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaksPreviewComponent.html":{}}}],["overview",{"_index":1116,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["package",{"_index":1019,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":672,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["page",{"_index":1118,"title":{},"body":{"index.html":{}}}],["panel",{"_index":156,"title":{},"body":{"components/AppComponent.html":{}}}],["parameters",{"_index":41,"title":{},"body":{"components/AdminComponentComponent.html":{},"injectables/AuthService.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"classes/Task.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["params",{"_index":420,"title":{},"body":{"injectables/BoardService.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{}}}],["params.set('id",{"_index":421,"title":{},"body":{"injectables/BoardService.html":{},"injectables/ColumnService.html":{}}}],["params['id",{"_index":350,"title":{},"body":{"components/BoardComponent.html":{}}}],["parsestompframe",{"_index":437,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["parsestompframe(rawframe",{"_index":450,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["partial",{"_index":402,"title":{},"body":{"injectables/BoardService.html":{}}}],["password",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticationRequest.html":{},"components/SignInComponent.html":{},"interfaces/UserRegisterDTO.html":{}}}],["performance",{"_index":1087,"title":{},"body":{"index.html":{}}}],["permissions",{"_index":1032,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["pipe(map((e",{"_index":417,"title":{},"body":{"injectables/BoardService.html":{},"components/BoardsListComponent.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{}}}],["pipe(repeat",{"_index":854,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["pipe(take(1",{"_index":382,"title":{},"body":{"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["pipe(takeuntil(this.destroy",{"_index":361,"title":{},"body":{"components/BoardComponent.html":{}}}],["pipe(tap((e",{"_index":132,"title":{},"body":{"components/AppComponent.html":{}}}],["pipes",{"_index":1076,"title":{},"body":{"index.html":{}}}],["post(`${this.apiurl}/login",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["post(`${this.baseurl}/random",{"_index":425,"title":{},"body":{"injectables/BoardService.html":{}}}],["post(this.apiurl",{"_index":657,"title":{},"body":{"injectables/CommentService.html":{}}}],["post(this.baseurl",{"_index":423,"title":{},"body":{"injectables/BoardService.html":{},"injectables/ColumnService.html":{},"injectables/TaskService.html":{}}}],["powerful",{"_index":1068,"title":{},"body":{"index.html":{}}}],["preview",{"_index":769,"title":{},"body":{"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{}}}],["preview'},{'name",{"_index":105,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["preview.component",{"_index":341,"title":{},"body":{"components/BoardComponent.html":{}}}],["preview.component.html",{"_index":770,"title":{},"body":{"components/TaksPreviewComponent.html":{}}}],["preview.component.scss",{"_index":771,"title":{},"body":{"components/TaksPreviewComponent.html":{}}}],["preview.component.ts",{"_index":768,"title":{},"body":{"components/TaksPreviewComponent.html":{},"coverage.html":{}}}],["preview.component.ts:18",{"_index":774,"title":{},"body":{"components/TaksPreviewComponent.html":{}}}],["preview.component.ts:19",{"_index":773,"title":{},"body":{"components/TaksPreviewComponent.html":{}}}],["preview.component.ts:20",{"_index":776,"title":{},"body":{"components/TaksPreviewComponent.html":{}}}],["preview.component.ts:21",{"_index":775,"title":{},"body":{"components/TaksPreviewComponent.html":{}}}],["preview/taks",{"_index":340,"title":{},"body":{"components/BoardComponent.html":{},"components/TaksPreviewComponent.html":{},"coverage.html":{}}}],["private",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"injectables/ColumnService.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":1085,"title":{},"body":{"index.html":{}}}],["project",{"_index":1043,"title":{},"body":{"index.html":{}}}],["promise",{"_index":318,"title":{},"body":{"components/BoardComponent.html":{},"components/TaskEditorComponent.html":{}}}],["promotetoadmin",{"_index":34,"title":{},"body":{"components/AdminComponentComponent.html":{},"injectables/UserService.html":{}}}],["promotetoadmin(userid",{"_index":38,"title":{},"body":{"components/AdminComponentComponent.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":29,"title":{"properties.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationRequest.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"components/UserBadgeComponent.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["protocol",{"_index":473,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["provideanimationsasync",{"_index":1154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providedin",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"injectables/UserService.html":{}}}],["providehttpclient(withinterceptorsfromdi",{"_index":1155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providemarkdown",{"_index":1156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":1153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":1142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providezonechangedetection",{"_index":1151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"components/BoardsListComponent.html":{},"components/TaskEditorComponent.html":{},"injectables/ThemeService.html":{}}}],["put(`${this.baseurl}/${updatedtask.id.tostring",{"_index":911,"title":{},"body":{"injectables/TaskService.html":{}}}],["rawframe",{"_index":452,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["rawframe.indexof('\\n\\n",{"_index":509,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["rawframe.substring(0",{"_index":511,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["rawframe.substring(divider",{"_index":512,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["reactiveformsmodule",{"_index":535,"title":{},"body":{"components/BoardsListComponent.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["readonly",{"_index":392,"title":{},"body":{"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"injectables/ColumnService.html":{},"components/TaskEditorComponent.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{}}}],["record",{"_index":447,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["reference",{"_index":1117,"title":{},"body":{"index.html":{}}}],["references",{"_index":1114,"title":{},"body":{"index.html":{}}}],["refreshboards",{"_index":540,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["register",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"components/SignInComponent.html":{}}}],["register(user",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["reload",{"_index":1061,"title":{},"body":{"index.html":{}}}],["removecomment",{"_index":814,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["removecomment(comment",{"_index":822,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["renderer",{"_index":915,"title":{},"body":{"injectables/ThemeService.html":{}}}],["renderer2",{"_index":927,"title":{},"body":{"injectables/ThemeService.html":{}}}],["rendererfactory",{"_index":920,"title":{},"body":{"injectables/ThemeService.html":{}}}],["rendererfactory.createrenderer(null",{"_index":934,"title":{},"body":{"injectables/ThemeService.html":{}}}],["rendererfactory2",{"_index":921,"title":{},"body":{"injectables/ThemeService.html":{}}}],["repeat",{"_index":835,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["req",{"_index":1158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.clone",{"_index":1161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":678,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["requestmodels/model/boarddto",{"_index":277,"title":{},"body":{"classes/Board.html":{}}}],["requestmodels/model/columndto",{"_index":592,"title":{},"body":{"classes/Column.html":{}}}],["requestmodels/model/commentdto",{"_index":628,"title":{},"body":{"classes/Comment.html":{},"classes/Task.html":{}}}],["requestmodels/model/taskdto",{"_index":784,"title":{},"body":{"classes/Task.html":{}}}],["requestmodels/model/taskpreviewdto",{"_index":889,"title":{},"body":{"classes/TaskPreview.html":{}}}],["requestmodels/model/userdto",{"_index":944,"title":{},"body":{"classes/User.html":{}}}],["required",{"_index":697,"title":{},"body":{"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["resources",{"_index":1109,"title":{},"body":{"index.html":{}}}],["response",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["response.token",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":113,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationRequest.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"classes/Role.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"components/UserBadgeComponent.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":47,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"components/UserBadgeComponent.html":{},"injectables/UserService.html":{}}}],["role",{"_index":187,"title":{"classes/Role.html":{}},"body":{"injectables/AuthService.html":{},"classes/Role.html":{},"coverage.html":{}}}],["roles",{"_index":53,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["root",{"_index":116,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"injectables/UserService.html":{}}}],["root'},{'name",{"_index":87,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["route",{"_index":1136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["router",{"_index":545,"title":{},"body":{"components/BoardsListComponent.html":{},"components/UserBadgeComponent.html":{},"miscellaneous/variables.html":{}}}],["router.navigate(['/sign",{"_index":1140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routermodule",{"_index":121,"title":{},"body":{"components/AppComponent.html":{},"components/BoardsListComponent.html":{}}}],["routeroutlet",{"_index":117,"title":{},"body":{"components/AppComponent.html":{}}}],["run",{"_index":1052,"title":{},"body":{"index.html":{}}}],["runner",{"_index":1094,"title":{},"body":{"index.html":{}}}],["running",{"_index":1056,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":154,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{},"injectables/TaskService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["rxjs/internal/observable",{"_index":414,"title":{},"body":{"injectables/BoardService.html":{}}}],["rxjs/websocket",{"_index":468,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["save",{"_index":885,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["scaffolding",{"_index":1066,"title":{},"body":{"index.html":{}}}],["schematics",{"_index":1074,"title":{},"body":{"index.html":{}}}],["selector",{"_index":15,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["send",{"_index":480,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["send\\ndestination:/app/board/${boardid}/update\\ncontent",{"_index":502,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["sendupdate",{"_index":438,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["sendupdate(boardid",{"_index":453,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["separatorkeyscodes",{"_index":808,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["serializer",{"_index":475,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["serveonce",{"_index":1055,"title":{},"body":{"index.html":{}}}],["server",{"_index":1049,"title":{},"body":{"index.html":{}}}],["services/theme.service",{"_index":711,"title":{},"body":{"components/HeaderComponent.html":{}}}],["setheaders",{"_index":1162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sign",{"_index":101,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["signal",{"_index":565,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["signal(true",{"_index":562,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["signincomponent",{"_index":100,"title":{"components/SignInComponent.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{},"coverage.html":{}}}],["signinform",{"_index":737,"title":{},"body":{"components/SignInComponent.html":{}}}],["signinform.get(\"password\")?.invalid",{"_index":763,"title":{},"body":{"components/SignInComponent.html":{}}}],["signupform",{"_index":738,"title":{},"body":{"components/SignInComponent.html":{}}}],["signupform.get(\"name\")?.invalid",{"_index":764,"title":{},"body":{"components/SignInComponent.html":{}}}],["signupform.get(\"password\")?.invalid",{"_index":765,"title":{},"body":{"components/SignInComponent.html":{}}}],["signupform.get(\"username\")?.invalid",{"_index":762,"title":{},"body":{"components/SignInComponent.html":{}}}],["socket",{"_index":431,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["socket.service",{"_index":337,"title":{},"body":{"components/BoardComponent.html":{}}}],["socket.service.ts",{"_index":430,"title":{},"body":{"injectables/BoardSocketService.html":{},"coverage.html":{}}}],["socket.service.ts:11",{"_index":458,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["socket.service.ts:12",{"_index":465,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["socket.service.ts:15",{"_index":441,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["socket.service.ts:19",{"_index":443,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["socket.service.ts:39",{"_index":444,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["socket.service.ts:45",{"_index":445,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["socket.service.ts:55",{"_index":455,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["socket.service.ts:60",{"_index":456,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["socket.service.ts:68",{"_index":451,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["socket.service.ts:89",{"_index":448,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["socketupdates",{"_index":355,"title":{},"body":{"components/BoardComponent.html":{}}}],["socketupdates$.pipe(tap((e",{"_index":359,"title":{},"body":{"components/BoardComponent.html":{}}}],["sockjs",{"_index":1034,"title":{},"body":{"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationRequest.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"classes/Role.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"components/UserBadgeComponent.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"injectables/UserService.html":{},"index.html":{}}}],["specific",{"_index":484,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["speed",{"_index":1088,"title":{},"body":{"index.html":{}}}],["src/.../admin.guard.ts",{"_index":1130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.config.ts",{"_index":1131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.guard.ts",{"_index":1132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.interceptor.ts",{"_index":1133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../task",{"_index":1134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../theme.service.ts",{"_index":1128,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/admin",{"_index":9,"title":{},"body":{"components/AdminComponentComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts",{"_index":115,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:29",{"_index":143,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:30",{"_index":138,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:31",{"_index":134,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:34",{"_index":136,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:36",{"_index":129,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":987,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/board/board.component.ts",{"_index":284,"title":{},"body":{"components/BoardComponent.html":{},"coverage.html":{}}}],["src/app/board/board.component.ts:116",{"_index":320,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:125",{"_index":312,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:130",{"_index":310,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:54",{"_index":323,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:55",{"_index":324,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:56",{"_index":307,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:70",{"_index":322,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:88",{"_index":321,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/board.component.ts:94",{"_index":316,"title":{},"body":{"components/BoardComponent.html":{}}}],["src/app/board/components/taks",{"_index":767,"title":{},"body":{"components/TaksPreviewComponent.html":{},"coverage.html":{}}}],["src/app/board/components/task",{"_index":794,"title":{},"body":{"components/TaskEditorComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/boards",{"_index":528,"title":{},"body":{"components/BoardsListComponent.html":{},"coverage.html":{}}}],["src/app/core/api/auth.service.ts",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/core/api/auth.service.ts:12",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/api/auth.service.ts:14",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/api/auth.service.ts:15",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/api/auth.service.ts:16",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/api/auth.service.ts:25",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/api/auth.service.ts:29",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/api/auth.service.ts:33",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/api/auth.service.ts:55",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/api/auth.service.ts:61",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/api/auth.service.ts:66",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/api/auth.service.ts:71",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/api/auth.service.ts:75",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/api/auth.service.ts:81",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/api/auth.service.ts:91",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/api/auth.service.ts:95",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/api/board",{"_index":429,"title":{},"body":{"injectables/BoardSocketService.html":{},"coverage.html":{}}}],["src/app/core/api/board.service.ts",{"_index":391,"title":{},"body":{"injectables/BoardService.html":{},"coverage.html":{}}}],["src/app/core/api/board.service.ts:12",{"_index":400,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/app/core/api/board.service.ts:16",{"_index":407,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/app/core/api/board.service.ts:22",{"_index":409,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/app/core/api/board.service.ts:30",{"_index":403,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/app/core/api/board.service.ts:36",{"_index":404,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/app/core/api/board.service.ts:42",{"_index":406,"title":{},"body":{"injectables/BoardService.html":{}}}],["src/app/core/api/column.service.ts",{"_index":598,"title":{},"body":{"injectables/ColumnService.html":{},"coverage.html":{}}}],["src/app/core/api/column.service.ts:11",{"_index":602,"title":{},"body":{"injectables/ColumnService.html":{}}}],["src/app/core/api/column.service.ts:14",{"_index":608,"title":{},"body":{"injectables/ColumnService.html":{}}}],["src/app/core/api/column.service.ts:22",{"_index":604,"title":{},"body":{"injectables/ColumnService.html":{}}}],["src/app/core/api/column.service.ts:28",{"_index":606,"title":{},"body":{"injectables/ColumnService.html":{}}}],["src/app/core/api/comment.service.ts",{"_index":640,"title":{},"body":{"injectables/CommentService.html":{},"coverage.html":{}}}],["src/app/core/api/comment.service.ts:11",{"_index":644,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/app/core/api/comment.service.ts:14",{"_index":650,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/app/core/api/comment.service.ts:20",{"_index":646,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/app/core/api/comment.service.ts:30",{"_index":648,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/app/core/api/task.service.ts",{"_index":891,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["src/app/core/api/task.service.ts:11",{"_index":895,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/core/api/task.service.ts:15",{"_index":900,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/core/api/task.service.ts:21",{"_index":902,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/core/api/task.service.ts:27",{"_index":897,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/core/api/task.service.ts:33",{"_index":904,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/core/api/task.service.ts:39",{"_index":899,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/app/core/api/user.service.ts",{"_index":973,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/app/core/api/user.service.ts:10",{"_index":975,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/core/api/user.service.ts:14",{"_index":976,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/core/api/user.service.ts:18",{"_index":977,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/core/components/error",{"_index":661,"title":{},"body":{"components/ErrorDisplayComponent.html":{},"coverage.html":{}}}],["src/app/core/components/header/header.component.ts",{"_index":682,"title":{},"body":{"components/HeaderComponent.html":{},"coverage.html":{}}}],["src/app/core/components/header/header.component.ts:35",{"_index":706,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/core/components/header/header.component.ts:36",{"_index":699,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/core/components/header/header.component.ts:37",{"_index":695,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/core/components/header/header.component.ts:41",{"_index":701,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/core/components/header/header.component.ts:46",{"_index":704,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/core/components/header/header.component.ts:50",{"_index":700,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/core/components/user",{"_index":947,"title":{},"body":{"components/UserBadgeComponent.html":{},"coverage.html":{}}}],["src/app/core/guards/admin.guard.ts",{"_index":999,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/guards/auth.guard.ts",{"_index":1001,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/intersceptors/auth.interceptor.ts",{"_index":1003,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/models/classes/board.ts",{"_index":267,"title":{},"body":{"classes/Board.html":{},"coverage.html":{}}}],["src/app/core/models/classes/board.ts:5",{"_index":275,"title":{},"body":{"classes/Board.html":{}}}],["src/app/core/models/classes/board.ts:6",{"_index":276,"title":{},"body":{"classes/Board.html":{}}}],["src/app/core/models/classes/board.ts:7",{"_index":272,"title":{},"body":{"classes/Board.html":{}}}],["src/app/core/models/classes/column.ts",{"_index":586,"title":{},"body":{"classes/Column.html":{},"coverage.html":{}}}],["src/app/core/models/classes/column.ts:5",{"_index":589,"title":{},"body":{"classes/Column.html":{}}}],["src/app/core/models/classes/column.ts:6",{"_index":590,"title":{},"body":{"classes/Column.html":{}}}],["src/app/core/models/classes/column.ts:7",{"_index":588,"title":{},"body":{"classes/Column.html":{}}}],["src/app/core/models/classes/comment.ts",{"_index":616,"title":{},"body":{"classes/Comment.html":{},"coverage.html":{}}}],["src/app/core/models/classes/comment.ts:5",{"_index":627,"title":{},"body":{"classes/Comment.html":{}}}],["src/app/core/models/classes/comment.ts:6",{"_index":624,"title":{},"body":{"classes/Comment.html":{}}}],["src/app/core/models/classes/comment.ts:7",{"_index":626,"title":{},"body":{"classes/Comment.html":{}}}],["src/app/core/models/classes/comment.ts:8",{"_index":623,"title":{},"body":{"classes/Comment.html":{}}}],["src/app/core/models/classes/comment.ts:9",{"_index":622,"title":{},"body":{"classes/Comment.html":{}}}],["src/app/core/models/classes/role.ts",{"_index":731,"title":{},"body":{"classes/Role.html":{},"coverage.html":{}}}],["src/app/core/models/classes/task.ts",{"_index":778,"title":{},"body":{"classes/Task.html":{},"coverage.html":{}}}],["src/app/core/models/classes/task.ts:5",{"_index":782,"title":{},"body":{"classes/Task.html":{}}}],["src/app/core/models/classes/task.ts:6",{"_index":783,"title":{},"body":{"classes/Task.html":{}}}],["src/app/core/models/classes/task.ts:7",{"_index":781,"title":{},"body":{"classes/Task.html":{}}}],["src/app/core/models/classes/task.ts:8",{"_index":780,"title":{},"body":{"classes/Task.html":{}}}],["src/app/core/models/classes/taskpreview.ts",{"_index":886,"title":{},"body":{"classes/TaskPreview.html":{},"coverage.html":{}}}],["src/app/core/models/classes/taskpreview.ts:4",{"_index":888,"title":{},"body":{"classes/TaskPreview.html":{}}}],["src/app/core/models/classes/taskpreview.ts:5",{"_index":887,"title":{},"body":{"classes/TaskPreview.html":{}}}],["src/app/core/models/classes/user.ts",{"_index":940,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/app/core/models/classes/user.ts:4",{"_index":942,"title":{},"body":{"classes/User.html":{}}}],["src/app/core/models/classes/user.ts:5",{"_index":943,"title":{},"body":{"classes/User.html":{}}}],["src/app/core/models/classes/user.ts:6",{"_index":941,"title":{},"body":{"classes/User.html":{}}}],["src/app/core/models/requestmodels/model/authenticationrequest.ts",{"_index":254,"title":{},"body":{"interfaces/AuthenticationRequest.html":{},"coverage.html":{}}}],["src/app/core/models/requestmodels/model/board.ts",{"_index":1008,"title":{},"body":{"coverage.html":{}}}],["src/app/core/models/requestmodels/model/boarddto.ts",{"_index":388,"title":{},"body":{"interfaces/BoardDTO.html":{},"coverage.html":{}}}],["src/app/core/models/requestmodels/model/column.ts",{"_index":1009,"title":{},"body":{"coverage.html":{}}}],["src/app/core/models/requestmodels/model/columndto.ts",{"_index":595,"title":{},"body":{"interfaces/ColumnDTO.html":{},"coverage.html":{}}}],["src/app/core/models/requestmodels/model/comment.ts",{"_index":1010,"title":{},"body":{"coverage.html":{}}}],["src/app/core/models/requestmodels/model/commentdto.ts",{"_index":637,"title":{},"body":{"interfaces/CommentDTO.html":{},"coverage.html":{}}}],["src/app/core/models/requestmodels/model/role.ts",{"_index":1011,"title":{},"body":{"coverage.html":{}}}],["src/app/core/models/requestmodels/model/task.ts",{"_index":1012,"title":{},"body":{"coverage.html":{}}}],["src/app/core/models/requestmodels/model/taskdto.ts",{"_index":791,"title":{},"body":{"interfaces/TaskDTO.html":{},"coverage.html":{}}}],["src/app/core/models/requestmodels/model/taskpreviewdto.ts",{"_index":890,"title":{},"body":{"interfaces/TaskPreviewDTO.html":{},"coverage.html":{}}}],["src/app/core/models/requestmodels/model/user.ts",{"_index":1013,"title":{},"body":{"coverage.html":{}}}],["src/app/core/models/requestmodels/model/userdto.ts",{"_index":970,"title":{},"body":{"interfaces/UserDTO.html":{},"coverage.html":{}}}],["src/app/core/models/requestmodels/model/userregisterdto.ts",{"_index":972,"title":{},"body":{"interfaces/UserRegisterDTO.html":{},"coverage.html":{}}}],["src/app/core/services/theme.service.ts",{"_index":913,"title":{},"body":{"injectables/ThemeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/services/theme.service.ts:11",{"_index":926,"title":{},"body":{"injectables/ThemeService.html":{}}}],["src/app/core/services/theme.service.ts:13",{"_index":930,"title":{},"body":{"injectables/ThemeService.html":{}}}],["src/app/core/services/theme.service.ts:15",{"_index":922,"title":{},"body":{"injectables/ThemeService.html":{}}}],["src/app/core/services/theme.service.ts:26",{"_index":924,"title":{},"body":{"injectables/ThemeService.html":{}}}],["src/app/core/services/theme.service.ts:9",{"_index":928,"title":{},"body":{"injectables/ThemeService.html":{}}}],["src/app/not",{"_index":724,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["src/app/sign",{"_index":732,"title":{},"body":{"components/SignInComponent.html":{},"coverage.html":{}}}],["start",{"_index":1050,"title":{},"body":{"index.html":{}}}],["started",{"_index":1041,"title":{"index.html":{}},"body":{}}],["state",{"_index":1137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":985,"title":{},"body":{"coverage.html":{}}}],["stomp/stompjs",{"_index":1030,"title":{},"body":{"dependencies.html":{}}}],["stompheaders",{"_index":432,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["store",{"_index":1081,"title":{},"body":{"index.html":{}}}],["string",{"_index":139,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationRequest.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"injectables/TaskService.html":{},"classes/User.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"injectables/UserService.html":{}}}],["styles",{"_index":660,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["styleurl",{"_index":26,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["subject",{"_index":325,"title":{},"body":{"components/BoardComponent.html":{}}}],["subscribe",{"_index":383,"title":{},"body":{"components/BoardComponent.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["subscribe\\nid:sub",{"_index":488,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["subscribeframe",{"_index":487,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["such",{"_index":1075,"title":{},"body":{"index.html":{}}}],["suits",{"_index":1106,"title":{},"body":{"index.html":{}}}],["switchmap",{"_index":332,"title":{},"body":{"components/BoardComponent.html":{},"components/BoardsListComponent.html":{}}}],["switchmap((boardid",{"_index":353,"title":{},"body":{"components/BoardComponent.html":{}}}],["system",{"_index":722,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/ThemeService.html":{},"miscellaneous/typealiases.html":{}}}],["table",{"_index":1018,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1017,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":152,"title":{},"body":{"components/AppComponent.html":{},"components/BoardComponent.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["take(1",{"_index":506,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["takeuntil",{"_index":333,"title":{},"body":{"components/BoardComponent.html":{}}}],["taks",{"_index":104,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["taks().title",{"_index":777,"title":{},"body":{"components/TaksPreviewComponent.html":{}}}],["takspreviewcomponent",{"_index":103,"title":{"components/TaksPreviewComponent.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{},"coverage.html":{}}}],["tap",{"_index":153,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{}}}],["tap((response",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["tap((user",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["task",{"_index":107,"title":{"classes/Task.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"classes/Task.html":{},"components/TaskEditorComponent.html":{},"injectables/TaskService.html":{},"components/UserBadgeComponent.html":{},"coverage.html":{}}}],["task(e",{"_index":910,"title":{},"body":{"injectables/TaskService.html":{}}}],["task(el",{"_index":908,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskdto",{"_index":779,"title":{"interfaces/TaskDTO.html":{}},"body":{"classes/Task.html":{},"interfaces/TaskDTO.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["taskeditorcomponent",{"_index":106,"title":{"components/TaskEditorComponent.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{},"coverage.html":{}}}],["taskform",{"_index":809,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["taskform.get(\"title\")?.haserror(\"required",{"_index":877,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["taskform.get(\"title\")?.value",{"_index":875,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["taskid",{"_index":621,"title":{},"body":{"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"components/TaskEditorComponent.html":{}}}],["taskpreview",{"_index":591,"title":{"classes/TaskPreview.html":{}},"body":{"classes/Column.html":{},"classes/TaskPreview.html":{},"coverage.html":{}}}],["taskpreviewdto",{"_index":596,"title":{"interfaces/TaskPreviewDTO.html":{}},"body":{"interfaces/ColumnDTO.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"coverage.html":{}}}],["tasks",{"_index":587,"title":{},"body":{"classes/Column.html":{},"interfaces/ColumnDTO.html":{}}}],["taskservice",{"_index":305,"title":{"injectables/TaskService.html":{}},"body":{"components/BoardComponent.html":{},"components/TaskEditorComponent.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["templateurl",{"_index":24,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["test",{"_index":1093,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1100,"title":{},"body":{"index.html":{}}}],["testrunning",{"_index":1097,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1090,"title":{},"body":{"index.html":{}}}],["textfieldmodule",{"_index":803,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["theme",{"_index":696,"title":{},"body":{"components/HeaderComponent.html":{}}}],["themechange",{"_index":690,"title":{},"body":{"components/HeaderComponent.html":{}}}],["themechange(event",{"_index":702,"title":{},"body":{"components/HeaderComponent.html":{}}}],["themecontrol",{"_index":689,"title":{},"body":{"components/HeaderComponent.html":{}}}],["themeservice",{"_index":694,"title":{"injectables/ThemeService.html":{}},"body":{"components/HeaderComponent.html":{},"injectables/ThemeService.html":{},"coverage.html":{}}}],["themetype",{"_index":710,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/ThemeService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["this._currenttheme",{"_index":931,"title":{},"body":{"injectables/ThemeService.html":{}}}],["this.activatedroute.params.pipe",{"_index":348,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.author",{"_index":633,"title":{},"body":{"classes/Comment.html":{}}}],["this.authservice",{"_index":572,"title":{},"body":{"components/BoardsListComponent.html":{},"components/SignInComponent.html":{}}}],["this.authservice.logout",{"_index":964,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["this.baseurl}/${userid}/promote",{"_index":981,"title":{},"body":{"injectables/UserService.html":{}}}],["this.board",{"_index":358,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.boardid",{"_index":347,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.boardid$.pipe",{"_index":352,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.boardservice",{"_index":574,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["this.boardservice.getallboards",{"_index":557,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["this.boardservice.getboardbyid(boardid",{"_index":354,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.boardsocketservice.connect(boardid",{"_index":356,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.boardsocketservice.disconnect",{"_index":364,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.boardsocketservice.listenforupdates",{"_index":357,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.boardsocketservice.sendupdate",{"_index":371,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.columns",{"_index":282,"title":{},"body":{"classes/Board.html":{}}}],["this.comments",{"_index":789,"title":{},"body":{"classes/Task.html":{},"components/TaskEditorComponent.html":{}}}],["this.commentservice",{"_index":852,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["this.content",{"_index":629,"title":{},"body":{"classes/Comment.html":{}}}],["this.createdat",{"_index":631,"title":{},"body":{"classes/Comment.html":{}}}],["this.currenttheme",{"_index":938,"title":{},"body":{"injectables/ThemeService.html":{}}}],["this.currentuser",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.currentusersubject",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.currentusersubject.asobservable",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.currentusersubject.next(null",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.currentusersubject.next(user",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.currentusersubject.value",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.currentuservalue",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.data.task",{"_index":869,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["this.data.task.comments",{"_index":862,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["this.data.task.comments.filter",{"_index":863,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["this.data.task.id",{"_index":860,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["this.description",{"_index":787,"title":{},"body":{"classes/Task.html":{}}}],["this.destroy$.complete",{"_index":363,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.destroy$.next",{"_index":362,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.dialogref.close",{"_index":874,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["this.dialogref.close(updatedtask",{"_index":873,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["this.errormessage",{"_index":681,"title":{},"body":{"components/ErrorDisplayComponent.html":{}}}],["this.fb.group",{"_index":751,"title":{},"body":{"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["this.getroles().includes(role",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hasrole('admin",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.helper.decodetoken(response.token",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.http",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"injectables/TaskService.html":{}}}],["this.http.delete(`${this.baseurl}/${id",{"_index":912,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.http.delete(this.apiurl",{"_index":659,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.http.delete(this.baseurl",{"_index":614,"title":{},"body":{"injectables/ColumnService.html":{}}}],["this.http.get",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.http.get('/api/users/current').pipe",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.http.get(this.baseurl",{"_index":979,"title":{},"body":{"injectables/UserService.html":{}}}],["this.http.post",{"_index":980,"title":{},"body":{"injectables/UserService.html":{}}}],["this.http.post(`${this.apiurl}/register",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.httpclient",{"_index":415,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.httpclient.delete(this.baseurl",{"_index":428,"title":{},"body":{"injectables/BoardService.html":{}}}],["this.id",{"_index":278,"title":{},"body":{"classes/Board.html":{},"classes/Column.html":{},"classes/Comment.html":{},"classes/Task.html":{},"classes/TaskPreview.html":{},"classes/User.html":{}}}],["this.iseditdescription",{"_index":857,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["this.issidenavopen",{"_index":155,"title":{},"body":{"components/AppComponent.html":{}}}],["this.loading.set(false",{"_index":558,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["this.loading.set(true",{"_index":556,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["this.matdialog.open(taskeditorcomponent",{"_index":375,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.name",{"_index":280,"title":{},"body":{"classes/Board.html":{},"classes/Column.html":{},"classes/User.html":{}}}],["this.parsestompframe(message",{"_index":499,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["this.refreshboards$.next",{"_index":576,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["this.refreshboards$.pipe",{"_index":555,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["this.renderer",{"_index":933,"title":{},"body":{"injectables/ThemeService.html":{}}}],["this.renderer.addclass(this.document.body",{"_index":939,"title":{},"body":{"injectables/ThemeService.html":{}}}],["this.renderer.removeclass(this.document.body",{"_index":937,"title":{},"body":{"injectables/ThemeService.html":{}}}],["this.router.navigate(['/board",{"_index":577,"title":{},"body":{"components/BoardsListComponent.html":{}}}],["this.router.navigate(['/sign",{"_index":965,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["this.signinform",{"_index":750,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.signinform.valid",{"_index":754,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.signinform.value.password",{"_index":757,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.signinform.value.username",{"_index":756,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.signupform",{"_index":753,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.signupform.valid",{"_index":758,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.signupform.value.name",{"_index":760,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.signupform.value.password",{"_index":761,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.signupform.value.username",{"_index":759,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.socket",{"_index":470,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["this.socket$.complete",{"_index":491,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["this.socket$.next",{"_index":482,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["this.socket$.next(subscribeframe",{"_index":490,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["this.socket$.next(updateframe",{"_index":504,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["this.socket$.pipe",{"_index":492,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["this.taskform",{"_index":848,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["this.taskform.controls['newcomment'].setvalue",{"_index":861,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["this.taskform.get('title')?.setvalue",{"_index":856,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["this.taskform.valid",{"_index":867,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["this.taskform.value.description",{"_index":871,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["this.taskform.value.newcomment.trim",{"_index":858,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["this.taskform.value.title",{"_index":870,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["this.taskid",{"_index":635,"title":{},"body":{"classes/Comment.html":{}}}],["this.tasks",{"_index":593,"title":{},"body":{"classes/Column.html":{}}}],["this.taskservice",{"_index":380,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.taskservice.deletetask(id).pipe(take(1)).subscribe",{"_index":379,"title":{},"body":{"components/BoardComponent.html":{}}}],["this.theme.toggletheme(e",{"_index":716,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.theme.toggletheme(event.value",{"_index":718,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.themecontrol.setvalue(this.theme.currenttheme",{"_index":717,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.themecontrol.valuechanges.subscribe((e",{"_index":715,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.title",{"_index":785,"title":{},"body":{"classes/Task.html":{},"classes/TaskPreview.html":{}}}],["this.token",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.username",{"_index":945,"title":{},"body":{"classes/User.html":{}}}],["this.userservice.getallusers",{"_index":56,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["this.userservice.promotetoadmin(userid).subscribe",{"_index":71,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["this.waitforconnection().subscribe",{"_index":486,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["title",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"components/BoardComponent.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{}}}],["toggle",{"_index":709,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaskEditorComponent.html":{}}}],["toggleeditdescription",{"_index":815,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["togglesidenav",{"_index":128,"title":{},"body":{"components/AppComponent.html":{}}}],["toggletheme",{"_index":916,"title":{},"body":{"injectables/ThemeService.html":{}}}],["toggletheme(val",{"_index":923,"title":{},"body":{"injectables/ThemeService.html":{}}}],["token",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["tokengetter",{"_index":1146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tools",{"_index":1069,"title":{},"body":{"index.html":{}}}],["track",{"_index":385,"title":{},"body":{"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/TaskEditorComponent.html":{}}}],["transferarrayitem",{"_index":327,"title":{},"body":{"components/BoardComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["true",{"_index":698,"title":{},"body":{"components/HeaderComponent.html":{},"components/TaksPreviewComponent.html":{},"components/UserBadgeComponent.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":1036,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":44,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationRequest.html":{},"classes/Board.html":{},"components/BoardComponent.html":{},"interfaces/BoardDTO.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"classes/Column.html":{},"interfaces/ColumnDTO.html":{},"injectables/ColumnService.html":{},"classes/Comment.html":{},"interfaces/CommentDTO.html":{},"injectables/CommentService.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"classes/Task.html":{},"interfaces/TaskDTO.html":{},"components/TaskEditorComponent.html":{},"classes/TaskPreview.html":{},"interfaces/TaskPreviewDTO.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"classes/User.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type:application/json\\n\\n${json.stringify(update)}\\0",{"_index":503,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["typealiases",{"_index":1126,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["unit",{"_index":1089,"title":{},"body":{"index.html":{}}}],["up",{"_index":766,"title":{},"body":{"components/SignInComponent.html":{}}}],["update",{"_index":454,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["updatedtask",{"_index":868,"title":{},"body":{"components/TaskEditorComponent.html":{},"injectables/TaskService.html":{}}}],["updateframe",{"_index":501,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["updates",{"_index":485,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["updatetask",{"_index":894,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatetask(updatedtask",{"_index":903,"title":{},"body":{"injectables/TaskService.html":{}}}],["url",{"_index":471,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["use",{"_index":1095,"title":{},"body":{"index.html":{}}}],["user",{"_index":72,"title":{"classes/User.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"classes/Comment.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"classes/User.html":{},"components/UserBadgeComponent.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user().name",{"_index":968,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["user().username",{"_index":969,"title":{},"body":{"components/UserBadgeComponent.html":{}}}],["user(data.author",{"_index":634,"title":{},"body":{"classes/Comment.html":{}}}],["user.id",{"_index":74,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["user.name",{"_index":76,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["user.password",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles?.join",{"_index":77,"title":{},"body":{"components/AdminComponentComponent.html":{}}}],["user.username",{"_index":75,"title":{},"body":{"components/AdminComponentComponent.html":{},"injectables/AuthService.html":{}}}],["user?.roles",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["userbadgecomponent",{"_index":109,"title":{"components/UserBadgeComponent.html":{}},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{},"coverage.html":{}}}],["userdto",{"_index":638,"title":{"interfaces/UserDTO.html":{}},"body":{"interfaces/CommentDTO.html":{},"interfaces/TaskDTO.html":{},"classes/User.html":{},"interfaces/UserDTO.html":{},"coverage.html":{}}}],["userid",{"_index":46,"title":{},"body":{"components/AdminComponentComponent.html":{},"injectables/UserService.html":{}}}],["username",{"_index":52,"title":{},"body":{"components/AdminComponentComponent.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationRequest.html":{},"components/SignInComponent.html":{},"classes/User.html":{},"interfaces/UserDTO.html":{},"interfaces/UserRegisterDTO.html":{}}}],["userregisterdto",{"_index":971,"title":{"interfaces/UserRegisterDTO.html":{}},"body":{"interfaces/UserRegisterDTO.html":{},"coverage.html":{}}}],["users",{"_index":31,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/BoardsListComponent.html":{}}}],["userservice",{"_index":32,"title":{"injectables/UserService.html":{}},"body":{"components/AdminComponentComponent.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["using",{"_index":1044,"title":{},"body":{"index.html":{}}}],["v12.stomp",{"_index":474,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["val",{"_index":925,"title":{},"body":{"injectables/ThemeService.html":{}}}],["validators",{"_index":749,"title":{},"body":{"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["validators.required",{"_index":752,"title":{},"body":{"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{}}}],["value",{"_index":50,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/BoardComponent.html":{},"injectables/BoardService.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"injectables/ColumnService.html":{},"injectables/CommentService.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/TaskEditorComponent.html":{},"injectables/TaskService.html":{},"injectables/ThemeService.html":{},"components/UserBadgeComponent.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["value.trim",{"_index":523,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["var",{"_index":83,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"components/BoardComponent.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/NotFoundComponent.html":{},"components/SignInComponent.html":{},"components/TaksPreviewComponent.html":{},"components/TaskEditorComponent.html":{},"components/UserBadgeComponent.html":{}}}],["variable",{"_index":988,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1129,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":461,"title":{},"body":{"injectables/BoardSocketService.html":{},"index.html":{},"properties.html":{}}}],["visit",{"_index":1115,"title":{},"body":{"index.html":{}}}],["void",{"_index":48,"title":{},"body":{"components/AdminComponentComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/BoardComponent.html":{},"injectables/BoardSocketService.html":{},"components/BoardsListComponent.html":{},"components/ErrorDisplayComponent.html":{},"components/HeaderComponent.html":{},"components/SignInComponent.html":{},"components/TaskEditorComponent.html":{},"injectables/ThemeService.html":{},"components/UserBadgeComponent.html":{}}}],["waitforconnection",{"_index":439,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["websocket",{"_index":467,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["websocketsubject",{"_index":457,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["whenever",{"_index":1062,"title":{},"body":{"index.html":{}}}],["width",{"_index":376,"title":{},"body":{"components/BoardComponent.html":{}}}],["works",{"_index":730,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["ws://localhost:8080/ws/websocket",{"_index":472,"title":{},"body":{"injectables/BoardSocketService.html":{}}}],["yyyy.mm.dd",{"_index":880,"title":{},"body":{"components/TaskEditorComponent.html":{}}}],["zone.js",{"_index":1038,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AdminComponentComponent.html":{"url":"components/AdminComponentComponent.html","title":"component - AdminComponentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AdminComponentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/admin-component/admin-component.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-admin-component\n            \n\n\n            \n                imports\n                \n                            MatCardModule\n                            MatButtonModule\n                            MatIconModule\n                            MatTableModule\n                            AsyncPipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./admin-component.component.html\n            \n\n\n\n            \n                styleUrl\n                ./admin-component.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayedColumns\n                            \n                            \n                                users$\n                            \n                            \n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                promoteToAdmin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/admin-component/admin-component.component.ts:25\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        promoteToAdmin\n                        \n                    \n                \n            \n            \n                \npromoteToAdmin(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/admin-component/admin-component.component.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayedColumns\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : ['id', 'username', 'name', 'roles', 'actions']\n                    \n                \n                    \n                        \n                                Defined in src/app/admin-component/admin-component.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.userService.getAllUsers()\n                    \n                \n                    \n                        \n                                Defined in src/app/admin-component/admin-component.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserService)\n                    \n                \n                    \n                        \n                                Defined in src/app/admin-component/admin-component.component.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { AsyncPipe } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTableModule } from '@angular/material/table';\nimport { UserService } from '../core/api/user.service';\n\n@Component({\n  selector: 'app-admin-component',\n  imports: [\n    MatCardModule,\n    MatButtonModule,\n    MatIconModule,\n    MatTableModule,\n    AsyncPipe,\n  ],\n  templateUrl: './admin-component.component.html',\n  styleUrl: './admin-component.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AdminComponentComponent {\n  displayedColumns = ['id', 'username', 'name', 'roles', 'actions'];\n  userService = inject(UserService);\n  users$ = this.userService.getAllUsers();\n\n  constructor() {}\n\n  promoteToAdmin(userId: number): void {\n    this.userService.promoteToAdmin(userId).subscribe();\n  }\n}\n\n    \n\n    \n        \n\n  \n    User Management\n  \n  \n    \n      \n      \n        ID\n        {{user.id}}\n      \n\n      \n      \n        Username\n        {{user.username}}\n      \n\n      \n      \n        Name\n        {{user.name}}\n      \n\n      \n      \n        Roles\n        {{user.roles?.join(', ') || 'User'}}\n      \n\n      \n      \n        Actions\n        \n          \n            admin_panel_settings\n          \n        \n      \n\n      \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      User Management                            ID        {{user.id}}                          Username        {{user.username}}                          Name        {{user.name}}                          Roles        {{user.roles?.join(\\', \\') || \\'User\\'}}                          Actions                              admin_panel_settings                                          '\n    var COMPONENTS = [{'name': 'AdminComponentComponent', 'selector': 'app-admin-component'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'BoardsListComponent', 'selector': 'app-boards-list'},{'name': 'ErrorDisplayComponent', 'selector': 'app-error-display'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'TaksPreviewComponent', 'selector': 'app-taks-preview'},{'name': 'TaskEditorComponent', 'selector': 'app-task-editor'},{'name': 'UserBadgeComponent', 'selector': 'app-user-badge'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AdminComponentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n\n            \n                imports\n                \n                            RouterOutlet\n                                HeaderComponent\n                            MatGridListModule\n                            MatSidenavModule\n                            MatButtonModule\n                            MatListModule\n                            RouterModule\n                            AsyncPipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentUser\n                            \n                            \n                                isAdmin\n                            \n                            \n                                isSidenavOpen\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toggleSidenav\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toggleSidenav\n                        \n                    \n                \n            \n            \n                \ntoggleSidenav()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AuthService)\n    .current()\n    .pipe(tap((e) => console.log(123)))\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AuthService).isAdmin()\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSidenavOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'kanban-board-client-app'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { RouterModule, RouterOutlet } from '@angular/router';\nimport { AuthService } from './core/api/auth.service';\nimport { HeaderComponent } from './core/components/header/header.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { take, tap } from 'rxjs';\nimport { AsyncPipe } from '@angular/common';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'app-root',\n  imports: [\n    RouterOutlet,\n    HeaderComponent,\n    MatGridListModule,\n    MatSidenavModule,\n    MatButtonModule,\n    MatListModule,\n    RouterModule,\n    AsyncPipe,\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  title = 'kanban-board-client-app';\n  isSidenavOpen = false;\n  currentUser = inject(AuthService)\n    .current()\n    .pipe(tap((e) => console.log(123)));\n  isAdmin = inject(AuthService).isAdmin();\n\n  toggleSidenav(): void {\n    this.isSidenavOpen = !this.isSidenavOpen;\n  }\n}\n\n    \n\n    \n        \n   -->\n  \n   -->\n\n  \n    \n      \n        Sign In\n        Boards List\n        @if (isAdmin) {\n        Admin Panel\n        }\n      \n    \n\n    \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '   -->     -->                    Sign In        Boards List        @if (isAdmin) {        Admin Panel        }                          '\n    var COMPONENTS = [{'name': 'AdminComponentComponent', 'selector': 'app-admin-component'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'BoardsListComponent', 'selector': 'app-boards-list'},{'name': 'ErrorDisplayComponent', 'selector': 'app-error-display'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'TaksPreviewComponent', 'selector': 'app-taks-preview'},{'name': 'TaskEditorComponent', 'selector': 'app-task-editor'},{'name': 'UserBadgeComponent', 'selector': 'app-user-badge'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/api/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                apiUrl\n                            \n                            \n                                    Public\n                                currentUser\n                            \n                            \n                                    Private\n                                currentUserSubject\n                            \n                            \n                                    Private\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                current\n                            \n                            \n                                    Public\n                                getBoardRoles\n                            \n                            \n                                getRoles\n                            \n                            \n                                hasRole\n                            \n                            \n                                    Public\n                                isAdmin\n                            \n                            \n                                isAuthenticated\n                            \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentUserValue\n                                \n                                \n                                    token\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/api/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        current\n                        \n                    \n                \n            \n            \n                \ncurrent()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/auth.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getBoardRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBoardRoles(boardId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/auth.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRoles\n                        \n                    \n                \n            \n            \n                \ngetRoles()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/auth.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     string[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasRole\n                        \n                    \n                \n            \n            \n                \nhasRole(role: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/auth.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                role\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAdmin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/auth.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \nisAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/auth.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(user: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/auth.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(user: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/auth.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        apiUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `/api/api/auth`\n                    \n                \n                    \n                        \n                                Defined in src/app/core/api/auth.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/api/auth.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentUserSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/api/auth.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new JwtHelperService()\n                    \n                \n                    \n                        \n                                Defined in src/app/core/api/auth.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentUserValue\n                    \n                \n\n                \n                    \n                        getcurrentUserValue()\n                    \n                \n                            \n                                \n                                    Defined in src/app/core/api/auth.service.ts:25\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        token\n                    \n                \n\n                \n                    \n                        gettoken()\n                    \n                \n                            \n                                \n                                    Defined in src/app/core/api/auth.service.ts:29\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { User } from '../models/classes/User';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = `/api/api/auth`;\n\n  private currentUserSubject: BehaviorSubject;\n  public currentUser: Observable;\n  private helper = new JwtHelperService();\n\n  constructor(private http: HttpClient) {\n    this.currentUserSubject = new BehaviorSubject(\n      JSON.parse(localStorage.getItem('currentUser') || 'null'),\n    );\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue(): any {\n    return this.currentUserSubject.value;\n  }\n\n  public get token(): string | null {\n    return localStorage.getItem('access_token');\n  }\n\n  login(user: { username: string; password: string }): Observable {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('currentUser');\n    return this.http\n      .post(`${this.apiUrl}/login`, {\n        username: user.username,\n        password: user.password,\n      })\n      .pipe(\n        tap((response) => {\n          console.log('response', response);\n          if (response.token) {\n            localStorage.setItem('access_token', response.token);\n            const user = this.helper.decodeToken(response.token);\n            localStorage.setItem('currentUser', JSON.stringify(user));\n            this.currentUserSubject.next(user);\n            console.log(user);\n          }\n        }),\n      );\n  }\n\n  logout(): void {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n\n  isAuthenticated(): boolean {\n    // const token = this.token;\n    return !!this.currentUserSubject.value;\n  }\n\n  getRoles(): string[] {\n    const user = this.currentUserValue;\n    return user?.roles || [];\n  }\n\n  public isAdmin(): boolean {\n    return this.hasRole('ADMIN');\n  }\n\n  public getBoardRoles(boardId: number): Observable {\n    return this.http.get(\n      `/api/boards/${boardId}/users/${this.currentUserValue.id}/role`,\n    );\n  }\n\n  register(user: {\n    username: string;\n    password: string;\n    name: string;\n  }): Observable {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('currentUser');\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n\n  hasRole(role: string): boolean {\n    return this.getRoles().includes(role);\n  }\n\n  current(): Observable {\n    return this.http.get('/api/users/current').pipe(\n      tap((user) => {\n        if (user) {\n          localStorage.setItem('currentUser', JSON.stringify(user));\n          this.currentUserSubject.next(user);\n        } else {\n          localStorage.setItem('currentUser', '');\n          this.currentUserSubject.next(null);\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticationRequest.html":{"url":"interfaces/AuthenticationRequest.html","title":"interface - AuthenticationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/requestModels/model/authenticationRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                Kanban API\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface AuthenticationRequest { \n    username?: string;\n    password?: string;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Board.html":{"url":"classes/Board.html","title":"class - Board","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Board\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/classes/Board.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            BoardDTO\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                columns\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: BoardDTO)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/models/classes/Board.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        BoardDTO\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        columns\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Column[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/Board.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/Board.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/Board.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BoardDTO } from '../requestModels/model/boardDTO';\nimport { Column } from './Column';\n\nexport class Board implements BoardDTO {\n  id: number;\n  name: string;\n  columns: Column[];\n  constructor(data: BoardDTO) {\n    this.id = data.id;\n    this.name = data.name;\n    this.columns = data.columns;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BoardComponent.html":{"url":"components/BoardComponent.html","title":"component - BoardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BoardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/board.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-board\n            \n\n\n            \n                imports\n                \n                                TaksPreviewComponent\n                            CdkDropListGroup\n                            CdkDropList\n                            CdkDrag\n                            AsyncPipe\n                            MatCardModule\n                            MatButtonModule\n                            MatButtonModule\n                            MatDialogModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./board.component.html\n            \n\n\n\n            \n                styleUrl\n                ./board.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                board$\n                            \n                            \n                                boardId$\n                            \n                            \n                                    Private\n                                destroy$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTask\n                            \n                            \n                                deliteTask\n                            \n                            \n                                    Async\n                                drop\n                            \n                            \n                                    Async\n                                editTask\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(boardService: BoardService, activatedRoute: ActivatedRoute, matDialog: MatDialog, taskService: TaskService, boardSocketService: BoardSocketService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/board.component.ts:56\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardService\n                                                  \n                                                        \n                                                                        BoardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        activatedRoute\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        matDialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        boardSocketService\n                                                  \n                                                        \n                                                                        BoardSocketService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTask\n                        \n                    \n                \n            \n            \n                \ncreateTask(boardId: string, columnId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/board.component.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                columnId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deliteTask\n                        \n                    \n                \n            \n            \n                \ndeliteTask(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/board.component.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        drop\n                        \n                    \n                \n            \n            \n                \n                        \n                    drop(event: CdkDragDrop, currentBoard: Board)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/board.component.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            CdkDragDrop\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentBoard\n                                            \n                                                            Board\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    editTask(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/board.component.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/board.component.ts:88\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/board.component.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        board$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/board.component.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        boardId$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/board.component.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/board/board.component.ts:56\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {\n  CdkDrag,\n  CdkDropList,\n  CdkDropListGroup,\n  moveItemInArray,\n  transferArrayItem,\n} from '@angular/cdk/drag-drop';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  firstValueFrom,\n  map,\n  merge,\n  Subject,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n} from 'rxjs';\nimport type { OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AsyncPipe } from '@angular/common';\nimport { Board } from '../core/models/classes/Board';\nimport { BoardService } from '../core/api/board.service';\nimport { BoardSocketService } from '../core/api/board-socket.service';\nimport type { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport type { Observable } from 'rxjs';\nimport { TaksPreviewComponent } from './components/taks-preview/taks-preview.component';\nimport { Task } from '../core/models/classes/Task';\nimport { TaskEditorComponent } from './components/task-editor/task-editor.component';\nimport { TaskService } from './../core/api/task.service';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'app-board',\n  imports: [\n    TaksPreviewComponent,\n    CdkDropListGroup,\n    CdkDropList,\n    CdkDrag,\n    AsyncPipe,\n    MatCardModule,\n    MatButtonModule,\n    MatButtonModule,\n    MatDialogModule,\n  ],\n  templateUrl: './board.component.html',\n  styleUrl: './board.component.scss',\n})\nexport class BoardComponent implements OnInit, OnDestroy {\n  board$: Observable;\n  boardId$: Observable;\n  private destroy$ = new Subject();\n\n  constructor(\n    private boardService: BoardService,\n    private activatedRoute: ActivatedRoute,\n    private matDialog: MatDialog,\n    private taskService: TaskService,\n    private boardSocketService: BoardSocketService,\n  ) {\n    this.boardId$ = this.activatedRoute.params.pipe(\n      map((params) => params['id']),\n    );\n  }\n\n  ngOnInit(): void {\n    const initialBoard$ = this.boardId$.pipe(\n      switchMap((boardId) => this.boardService.getBoardById(boardId)),\n    );\n\n    const socketUpdates$ = this.boardId$.pipe(\n      switchMap((boardId) => {\n        this.boardSocketService.connect(boardId);\n        return this.boardSocketService.listenForUpdates();\n      }),\n    );\n\n    this.board$ = merge(\n      initialBoard$,\n      socketUpdates$.pipe(tap((e) => console.log(e))),\n    ).pipe(takeUntil(this.destroy$));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.boardSocketService.disconnect();\n  }\n\n  async drop(event: CdkDragDrop, currentBoard: Board): Promise {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex,\n      );\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex,\n      );\n    }\n\n    this.boardSocketService.sendUpdate(\n      currentBoard.id.toString(),\n      currentBoard,\n    );\n  }\n\n  async editTask(id: number): Promise {\n    const task = await firstValueFrom(this.taskService.getTasksByID(id));\n\n    this.matDialog.open(TaskEditorComponent, {\n      data: { task },\n      width: '800px',\n    });\n  }\n\n  deliteTask(id: number): void {\n    console.log('deliteTask', id);\n    this.taskService.deleteTask(id).pipe(take(1)).subscribe();\n  }\n\n  createTask(boardId: string, columnId: string): void {\n    this.taskService\n      .createTask(\n        new Task({\n          // id?: number;\n          title: 'новая задача',\n          description: 'описание',\n          comments: [],\n        }),\n        boardId,\n        columnId\n      )\n      .pipe(take(1))\n      .subscribe();\n  }\n}\n\n    \n\n    \n        \n  @if (board$ | async; as board) {\n    @for (column of board.columns; track $index) {\n      \n        \n          {{ column.name }}\n        \n\n        \n          @for (task of column.tasks; track $index) {\n            \n          }\n          \n            \n              Добавить задачу\n            \n          \n           -->\n        \n      \n    }\n  }\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  @if (board$ | async; as board) {    @for (column of board.columns; track $index) {                        {{ column.name }}                          @for (task of column.tasks; track $index) {                      }                                    Добавить задачу                                 -->                  }  }'\n    var COMPONENTS = [{'name': 'AdminComponentComponent', 'selector': 'app-admin-component'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'BoardsListComponent', 'selector': 'app-boards-list'},{'name': 'ErrorDisplayComponent', 'selector': 'app-error-display'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'TaksPreviewComponent', 'selector': 'app-taks-preview'},{'name': 'TaskEditorComponent', 'selector': 'app-task-editor'},{'name': 'UserBadgeComponent', 'selector': 'app-user-badge'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BoardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BoardDTO.html":{"url":"interfaces/BoardDTO.html","title":"interface - BoardDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BoardDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/requestModels/model/boardDTO.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            columns\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        columns\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        columns:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ColumnDTO } from './columnDTO';\n\n\nexport interface BoardDTO { \n    id?: number;\n    name?: string;\n    columns?: Array;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BoardService.html":{"url":"injectables/BoardService.html","title":"injectable - BoardService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BoardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/api/board.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createBoard\n                            \n                            \n                                createRandomBoard\n                            \n                            \n                                deleteBoard\n                            \n                            \n                                getAllBoards\n                            \n                            \n                                getBoardById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/api/board.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createBoard\n                        \n                    \n                \n            \n            \n                \ncreateBoard(board: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/board.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                board\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createRandomBoard\n                        \n                    \n                \n            \n            \n                \ncreateRandomBoard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/board.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteBoard\n                        \n                    \n                \n            \n            \n                \ndeleteBoard(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/board.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllBoards\n                        \n                    \n                \n            \n            \n                \ngetAllBoards()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/board.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBoardById\n                        \n                    \n                \n            \n            \n                \ngetBoardById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/board.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/api/boards'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/api/board.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Board } from '../models/classes/Board';\nimport { BoardDTO } from '../models/requestModels/model/boardDTO';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs';\nimport type { Observable } from 'rxjs/internal/Observable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BoardService {\n  private readonly baseUrl = '/api/boards';\n\n  constructor(private httpClient: HttpClient) {}\n\n  getAllBoards(): Observable {\n    return this.httpClient\n      .get(this.baseUrl)\n      .pipe(map((e) => e.map((el) => new Board(el))));\n  }\n\n  getBoardById(id: string): Observable {\n    let params = new HttpParams();\n    params = params.set('id', id);\n    return this.httpClient\n      .get(this.baseUrl, { params })\n      .pipe(map((e) => new Board(e[0])));\n  }\n\n  createBoard(board: Partial): Observable {\n    return this.httpClient\n      .post(this.baseUrl, board)\n      .pipe(map((e) => new Board(e)));\n  }\n\n  createRandomBoard(): Observable {\n    return this.httpClient\n      .post(`${this.baseUrl}/random`, null)\n      .pipe(map((e) => new Board(e)));\n  }\n\n  deleteBoard(id: number): Observable {\n    const params = new HttpParams().set('id', id.toString());\n    return this.httpClient.delete(this.baseUrl, { params });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BoardSocketService.html":{"url":"injectables/BoardSocketService.html","title":"injectable - BoardSocketService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BoardSocketService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/api/board-socket.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                socket$\n                            \n                            \n                                    Private\n                                    Readonly\n                                stompHeaders\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                connect\n                            \n                            \n                                disconnect\n                            \n                            \n                                listenForUpdates\n                            \n                            \n                                    Private\n                                objectToStompHeaders\n                            \n                            \n                                    Private\n                                parseStompFrame\n                            \n                            \n                                sendUpdate\n                            \n                            \n                                    Private\n                                waitForConnection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/api/board-socket.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        connect\n                        \n                    \n                \n            \n            \n                \nconnect(boardId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/board-socket.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        disconnect\n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/board-socket.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listenForUpdates\n                        \n                    \n                \n            \n            \n                \nlistenForUpdates()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/board-socket.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        objectToStompHeaders\n                        \n                    \n                \n            \n            \n                \n                        \n                    objectToStompHeaders(obj: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/board-socket.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseStompFrame\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseStompFrame(rawFrame: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/board-socket.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                rawFrame\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendUpdate\n                        \n                    \n                \n            \n            \n                \nsendUpdate(boardId: string, update: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/board-socket.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                update\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        waitForConnection\n                        \n                    \n                \n            \n            \n                \n                        \n                    waitForConnection()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/board-socket.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        socket$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebSocketSubject\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/api/board-socket.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        stompHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    'accept-version': '1.2',\n    host: 'localhost',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/core/api/board-socket.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { filter, map, Observable, take } from 'rxjs';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport { AuthService } from './auth.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BoardSocketService {\n  private socket$: WebSocketSubject;\n  private readonly stompHeaders = {\n    'accept-version': '1.2',\n    host: 'localhost',\n  };\n\n  constructor(private authService: AuthService) {}\n\n  connect(boardId: string): void {\n    this.socket$ = webSocket({\n      url: `ws://localhost:8080/ws/websocket`,\n      protocol: 'v12.stomp',\n      serializer: (msg) => msg,\n      deserializer: (e) => e.data,\n    });\n\n    // Send CONNECT frame\n    this.socket$.next(\n      `CONNECT\\n${this.objectToStompHeaders(this.stompHeaders)}\\n\\n\\0`,\n    );\n\n    // Subscribe to board-specific updates\n    this.waitForConnection().subscribe(() => {\n      const subscribeFrame = `SUBSCRIBE\\nid:sub-${boardId}\\ndestination:/topic/board/${boardId}\\n\\n\\0`;\n      this.socket$.next(subscribeFrame);\n    });\n  }\n\n  disconnect(): void {\n    if (this.socket$) {\n      this.socket$.complete();\n    }\n  }\n\n  listenForUpdates(): Observable {\n    return this.socket$.pipe(\n      filter((message: string) => message.startsWith('MESSAGE')),\n      map((message: string) => {\n        const [command, headers, body] = this.parseStompFrame(message);\n        return JSON.parse(body);\n      }),\n    );\n  }\n\n  sendUpdate(boardId: string, update: any): void {\n    const updateFrame = `SEND\\ndestination:/app/board/${boardId}/update\\ncontent-type:application/json\\n\\n${JSON.stringify(update)}\\0`;\n    this.socket$.next(updateFrame);\n  }\n\n  private waitForConnection(): Observable {\n    return this.socket$.pipe(\n      filter((message: string) => message.startsWith('CONNECTED')),\n      take(1),\n      map(() => void 0),\n    );\n  }\n\n  private parseStompFrame(\n    rawFrame: string,\n  ): [string, Record, string] {\n    const divider = rawFrame.indexOf('\\n\\n');\n    const headerSection = rawFrame.substring(0, divider);\n    const body = rawFrame.substring(divider + 2).replace(/\\0$/, '');\n\n    const headers = headerSection.split('\\n');\n    const command = headers.shift() || '';\n    const headerObj = headers.reduce(\n      (acc, line) => {\n        const [key, value] = line.split(':');\n        if (key && value) acc[key.trim()] = value.trim();\n        return acc;\n      },\n      {} as Record,\n    );\n\n    return [command, headerObj, body];\n  }\n\n  private objectToStompHeaders(obj: Record): string {\n    return Object.entries(obj)\n      .map(([key, value]) => `${key}:${value}`)\n      .join('\\n');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BoardsListComponent.html":{"url":"components/BoardsListComponent.html","title":"component - BoardsListComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BoardsListComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/boards-list/boards-list.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-boards-list\n            \n\n\n            \n                imports\n                \n                            MatCardModule\n                            MatButtonModule\n                            MatTabsModule\n                            MatFormFieldModule\n                            FormsModule\n                            MatInputModule\n                            ReactiveFormsModule\n                            MatToolbarModule\n                            MatButtonModule\n                            MatIconModule\n                            MatIconModule\n                            AsyncPipe\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./boards-list.component.html\n            \n\n\n\n            \n                styleUrl\n                ./boards-list.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                authService\n                            \n                            \n                                boards$\n                            \n                            \n                                    Private\n                                boardService\n                            \n                            \n                                loading\n                            \n                            \n                                    Private\n                                refreshBoards$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addBoard\n                            \n                            \n                                canDelete\n                            \n                            \n                                deleteBoard\n                            \n                            \n                                openBoard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/boards-list/boards-list.component.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addBoard\n                        \n                    \n                \n            \n            \n                \naddBoard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/boards-list/boards-list.component.ts:64\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        canDelete\n                        \n                    \n                \n            \n            \n                \ncanDelete(boardId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/boards-list/boards-list.component.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteBoard\n                        \n                    \n                \n            \n            \n                \ndeleteBoard(boardId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/boards-list/boards-list.component.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openBoard\n                        \n                    \n                \n            \n            \n                \nopenBoard(boardId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/boards-list/boards-list.component.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                boardId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/boards-list/boards-list.component.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        boards$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.refreshBoards$.pipe(\n    tap(() => this.loading.set(true)),\n    switchMap(() => this.boardService.getAllBoards()),\n    tap(() => this.loading.set(false)),\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/boards-list/boards-list.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        boardService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(BoardService)\n                    \n                \n                    \n                        \n                                Defined in src/app/boards-list/boards-list.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(true)\n                    \n                \n                    \n                        \n                                Defined in src/app/boards-list/boards-list.component.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        refreshBoards$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/boards-list/boards-list.component.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { BehaviorSubject, map, Observable, switchMap, take, tap } from 'rxjs';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n  signal,\n} from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Router, RouterModule } from '@angular/router';\nimport { AsyncPipe } from '@angular/common';\nimport { BoardService } from '../core/api/board.service';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { AuthService } from '../core/api/auth.service';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'app-boards-list',\n  imports: [\n    MatCardModule,\n    MatButtonModule,\n    MatTabsModule,\n    MatFormFieldModule,\n    FormsModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatIconModule,\n    AsyncPipe,\n    RouterModule,\n  ],\n  templateUrl: './boards-list.component.html',\n  styleUrl: './boards-list.component.scss',\n})\nexport class BoardsListComponent {\n  private refreshBoards$ = new BehaviorSubject(null);\n  private boardService = inject(BoardService);\n  boards$ = this.refreshBoards$.pipe(\n    tap(() => this.loading.set(true)),\n    switchMap(() => this.boardService.getAllBoards()),\n    tap(() => this.loading.set(false)),\n  );\n  loading = signal(true);\n\n\n  constructor(\n    private router: Router,\n    public authService: AuthService,\n  ) { }\n\n  canDelete(boardId: number): Observable {\n    return this.authService\n      .getBoardRoles(boardId)\n      .pipe(map((e) => e.includes('ADMIN')));\n  }\n\n  addBoard(): void {\n    this.boardService\n      // .createBoard({\n      //   name: 'string',\n      //   columns: [],JsonManagedReference\n      //   users: [],\n      // })\n      .createRandomBoard()\n      .pipe(take(1))\n      .subscribe(() => this.refreshBoards$.next());\n  }\n\n  openBoard(boardId: number): void {\n    this.router.navigate(['/board', boardId]);\n  }\n\n  deleteBoard(boardId: number): void {\n    this.boardService\n      .deleteBoard(boardId)\n      .pipe(take(1))\n      .subscribe(() => this.refreshBoards$.next());\n  }\n}\n\n    \n\n    \n        \n  \n    \n      @if (boards$ | async; as boards) {\n        @for (board of boards; track board.id) {\n          \n            {{ board.name }}\n            {{ board.id }}\n            \n              @if (authService.hasRole('ADMIN') || (canDelete(board.id) | async)) {\n                \n                  Delete Board\n                \n              }\n              \n                Open Board\n              \n            \n          \n        }\n        \n          Create New Board\n        \n      }\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            @if (boards$ | async; as boards) {        @for (board of boards; track board.id) {                      {{ board.name }}            {{ board.id }}                          @if (authService.hasRole(\\'ADMIN\\') || (canDelete(board.id) | async)) {                                  Delete Board                              }                              Open Board                                            }                  Create New Board              }      '\n    var COMPONENTS = [{'name': 'AdminComponentComponent', 'selector': 'app-admin-component'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'BoardsListComponent', 'selector': 'app-boards-list'},{'name': 'ErrorDisplayComponent', 'selector': 'app-error-display'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'TaksPreviewComponent', 'selector': 'app-taks-preview'},{'name': 'TaskEditorComponent', 'selector': 'app-task-editor'},{'name': 'UserBadgeComponent', 'selector': 'app-user-badge'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BoardsListComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Column.html":{"url":"classes/Column.html","title":"class - Column","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Column\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/classes/Column.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ColumnDTO\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                tasks\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: ColumnDTO)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/models/classes/Column.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        ColumnDTO\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/Column.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/Column.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskPreview[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/Column.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ColumnDTO } from '../requestModels/model/columnDTO';\nimport { TaskPreview } from './TaskPreview';\n\nexport class Column implements ColumnDTO {\n  id?: number;\n  name?: string;\n  tasks?: TaskPreview[];\n  constructor(data: ColumnDTO) {\n    this.id = data.id;\n    this.name = data.name;\n    this.tasks = data.tasks;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColumnDTO.html":{"url":"interfaces/ColumnDTO.html","title":"interface - ColumnDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ColumnDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/requestModels/model/columnDTO.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tasks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tasks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tasks:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TaskPreviewDTO } from './taskPreviewDTO';\n\n\nexport interface ColumnDTO { \n    id?: number;\n    name?: string;\n    tasks?: Array;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ColumnService.html":{"url":"injectables/ColumnService.html","title":"injectable - ColumnService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ColumnService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/api/column.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createColumn\n                            \n                            \n                                deleteColumn\n                            \n                            \n                                getAllColumns\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/api/column.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createColumn\n                        \n                    \n                \n            \n            \n                \ncreateColumn(column: Column)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/column.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                column\n                                            \n                                                            Column\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteColumn\n                        \n                    \n                \n            \n            \n                \ndeleteColumn(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/column.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllColumns\n                        \n                    \n                \n            \n            \n                \ngetAllColumns(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/column.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/api/columns'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/api/column.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { map, Observable } from 'rxjs';\nimport { Column } from '../models/classes/Column';\nimport { ColumnDTO } from '../models/requestModels/model/columnDTO';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ColumnService {\n  private readonly baseUrl = '/api/columns';\n  constructor(private http: HttpClient) {}\n\n  getAllColumns(id: number): Observable {\n    let params = new HttpParams();\n    params = params.set('id', id.toString());\n    return this.http\n      .get(this.baseUrl, { params })\n      .pipe(map((e) => e.map((el) => new Column(el))));\n  }\n\n  createColumn(column: Column): Observable {\n    return this.http\n      .post(this.baseUrl, column)\n      .pipe(map((e) => new Column(e)));\n  }\n\n  deleteColumn(id: number): Observable {\n    const params = new HttpParams().set('id', id.toString());\n    return this.http.delete(this.baseUrl, { params });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Comment.html":{"url":"classes/Comment.html","title":"class - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/classes/Comment.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            CommentDTO\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                author\n                            \n                            \n                                    Optional\n                                content\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                taskId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: CommentDTO)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/models/classes/Comment.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        CommentDTO\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/Comment.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/Comment.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/Comment.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/Comment.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        taskId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/Comment.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CommentDTO } from '../requestModels/model/commentDTO';\nimport { User } from './User';\n\nexport class Comment implements CommentDTO {\n  id?: number;\n  content?: string;\n  createdAt?: Date;\n  author?: User;\n  taskId?: number;\n\n  constructor(data: CommentDTO) {\n    this.id = data.id;\n    this.content = data.content;\n    this.createdAt = data.createdAt;\n    this.author = new User(data.author);\n    this.taskId = data.taskId;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CommentDTO.html":{"url":"interfaces/CommentDTO.html","title":"interface - CommentDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CommentDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/requestModels/model/commentDTO.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            author\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            content\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            taskId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        author\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        author:         UserDTO\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDTO\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        taskId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        taskId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserDTO } from './userDTO';\n\n\nexport interface CommentDTO { \n    id?: number;\n    content?: string;\n    createdAt?: Date;\n    author?: UserDTO;\n    taskId?: number;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentService.html":{"url":"injectables/CommentService.html","title":"injectable - CommentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/api/comment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                apiUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createComment\n                            \n                            \n                                deleteComment\n                            \n                            \n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/api/comment.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createComment\n                        \n                    \n                \n            \n            \n                \ncreateComment(comment: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/comment.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                comment\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteComment\n                        \n                    \n                \n            \n            \n                \ndeleteComment(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/comment.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getComments\n                        \n                    \n                \n            \n            \n                \ngetComments(taskId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/comment.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        apiUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/api/comments'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/api/comment.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { map, Observable } from 'rxjs';\nimport { Comment } from '../models/classes/Comment';\nimport { CommentDTO } from '../models/requestModels/model/commentDTO';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CommentService {\n  apiUrl = '/api/comments';\n  constructor(private http: HttpClient) {}\n\n  getComments(taskId: number): Observable {\n    return this.http\n      .get(`${this.apiUrl}/task/${taskId}`)\n      .pipe(map((e) => e.map((el) => new Comment(el))));\n  }\n\n  createComment(comment: {\n    content: string;\n    taskId: number;\n  }): Observable {\n    console.log('createComment', comment);\n    return this.http\n      .post(this.apiUrl, comment)\n      .pipe(map((e) => new Comment(e)));\n  }\n\n  deleteComment(id: number): Observable {\n    return this.http.delete(this.apiUrl, {\n      params: { id: id.toString() },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ErrorDisplayComponent.html":{"url":"components/ErrorDisplayComponent.html","title":"component - ErrorDisplayComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ErrorDisplayComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/core/components/error-display/error-display.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-error-display\n            \n\n\n            \n                imports\n                \n                            MatCardModule\n                \n            \n\n\n            \n                styles\n                \n      .error-card {\n        background-color: #ffebee;\n        color: #d32f2f;\n        margin: 16px;\n        padding: 16px;\n      }\n    \n            \n\n            \n                template\n                @if (errorMessage) {\n  \n    Error\n    \n      {{ errorMessage() }}\n    \n    \n      \n        Dismiss\n      \n    \n  \n}\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearError\n                        \n                    \n                \n            \n            \n                \nclearError()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/components/error-display/error-display.component.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('Error with request')\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/error-display/error-display.component.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'app-error-display',\n  template: `\n    @if (errorMessage) {\n      \n        Error\n        \n          {{ errorMessage() }}\n        \n        \n          \n            Dismiss\n          \n        \n      \n    }\n  `,\n  styles: [\n    `\n      .error-card {\n        background-color: #ffebee;\n        color: #d32f2f;\n        margin: 16px;\n        padding: 16px;\n      }\n    `,\n  ],\n  imports: [MatCardModule],\n})\nexport class ErrorDisplayComponent {\n  errorMessage = input('Error with request');\n\n  clearError() {\n    this.errorMessage = null;\n  }\n}\n\n    \n\n\n    \n            \n      .error-card {\n        background-color: #ffebee;\n        color: #d32f2f;\n        margin: 16px;\n        padding: 16px;\n      }\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (errorMessage) {      Error          {{ errorMessage() }}                      Dismiss            }'\n    var COMPONENTS = [{'name': 'AdminComponentComponent', 'selector': 'app-admin-component'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'BoardsListComponent', 'selector': 'app-boards-list'},{'name': 'ErrorDisplayComponent', 'selector': 'app-error-display'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'TaksPreviewComponent', 'selector': 'app-taks-preview'},{'name': 'TaskEditorComponent', 'selector': 'app-task-editor'},{'name': 'UserBadgeComponent', 'selector': 'app-user-badge'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ErrorDisplayComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/core/components/header/header.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n\n            \n                imports\n                \n                            MatToolbarModule\n                            MatButtonModule\n                            MatIconModule\n                            MatButtonToggleModule\n                            ReactiveFormsModule\n                                UserBadgeComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isLoggedIn\n                            \n                            \n                                openSideNav\n                            \n                            \n                                themeControl\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                themeChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isLoggedIn\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                openSideNav\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(theme: ThemeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/components/header/header.component.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        theme\n                                                  \n                                                        \n                                                                        ThemeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isLoggedIn\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/core/components/header/header.component.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        user\n                    \n                \n                        \n                            \n                                    Defined in src/app/core/components/header/header.component.ts:37\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        openSideNav\n                    \n                \n                        \n                            \n                                    Defined in src/app/core/components/header/header.component.ts:50\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/components/header/header.component.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        themeChange\n                        \n                    \n                \n            \n            \n                \nthemeChange(event: MatButtonToggleChange)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/components/header/header.component.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MatButtonToggleChange\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/core/components/header/header.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openSideNav\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/core/components/header/header.component.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        themeControl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormControl('light')\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/header/header.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/core/components/header/header.component.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {\n  ChangeDetectionStrategy,\n  Component,\n  input,\n  OnInit,\n  output,\n} from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport {\n  MatButtonToggleChange,\n  MatButtonToggleModule,\n} from '@angular/material/button-toggle';\nimport { ThemeService, themeType } from '../../services/theme.service';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { User } from '../../models/classes/User';\nimport { UserBadgeComponent } from '../user-badge/user-badge.component';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'app-header',\n  imports: [\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatButtonToggleModule,\n    ReactiveFormsModule,\n    UserBadgeComponent,\n  ],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss',\n})\nexport class HeaderComponent implements OnInit {\n  themeControl = new FormControl('light');\n  isLoggedIn = input.required();\n  user = input();\n\n  constructor(private theme: ThemeService) {}\n\n  ngOnInit(): void {\n    this.themeControl.valueChanges.subscribe((e) => this.theme.toggleTheme(e));\n    this.themeControl.setValue(this.theme.currentTheme);\n  }\n\n  themeChange(event: MatButtonToggleChange): void {\n    this.theme.toggleTheme(event.value);\n  }\n\n  openSideNav = output();\n}\n\n    \n\n    \n        \n  \n    menu\n  \n  Kanban Board\n  \n\n  @if (themeControl) {\n  \n    Light\n    Dark\n    System\n  \n  }\n  @if(isLoggedIn){\n    \n  }@else {\n    Login\n  }\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      menu    Kanban Board    @if (themeControl) {      Light    Dark    System    }  @if(isLoggedIn){      }@else {    Login  }'\n    var COMPONENTS = [{'name': 'AdminComponentComponent', 'selector': 'app-admin-component'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'BoardsListComponent', 'selector': 'app-boards-list'},{'name': 'ErrorDisplayComponent', 'selector': 'app-error-display'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'TaksPreviewComponent', 'selector': 'app-taks-preview'},{'name': 'TaskEditorComponent', 'selector': 'app-task-editor'},{'name': 'UserBadgeComponent', 'selector': 'app-user-badge'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotFoundComponent.html":{"url":"components/NotFoundComponent.html","title":"component - NotFoundComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NotFoundComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/not-found/not-found.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-not-found\n            \n\n\n\n\n\n\n            \n                templateUrl\n                ./not-found.component.html\n            \n\n\n\n            \n                styleUrl\n                ./not-found.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'app-not-found',\n  imports: [],\n  templateUrl: './not-found.component.html',\n  styleUrl: './not-found.component.scss',\n})\nexport class NotFoundComponent {}\n\n    \n\n    \n        not-found works!\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'not-found works!'\n    var COMPONENTS = [{'name': 'AdminComponentComponent', 'selector': 'app-admin-component'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'BoardsListComponent', 'selector': 'app-boards-list'},{'name': 'ErrorDisplayComponent', 'selector': 'app-error-display'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'TaksPreviewComponent', 'selector': 'app-taks-preview'},{'name': 'TaskEditorComponent', 'selector': 'app-task-editor'},{'name': 'UserBadgeComponent', 'selector': 'app-user-badge'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NotFoundComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Role.html":{"url":"classes/Role.html","title":"class - Role","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/classes/Role.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Role {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignInComponent.html":{"url":"components/SignInComponent.html","title":"component - SignInComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SignInComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/sign-in/sign-in.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-sign-in\n            \n\n\n            \n                imports\n                \n                            MatCardModule\n                            MatButtonModule\n                            MatTabsModule\n                            MatFormFieldModule\n                            FormsModule\n                            MatInputModule\n                            ReactiveFormsModule\n                            MatIconModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./sign-in.component.html\n            \n\n\n\n            \n                styleUrl\n                ./sign-in.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                signInForm\n                            \n                            \n                                signUpForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onSignIn\n                            \n                            \n                                onSignUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(fb: FormBuilder, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/sign-in/sign-in.component.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onSignIn\n                        \n                    \n                \n            \n            \n                \nonSignIn()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/sign-in/sign-in.component.ts:54\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSignUp\n                        \n                    \n                \n            \n            \n                \nonSignUp()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/sign-in/sign-in.component.ts:68\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        signInForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/sign-in/sign-in.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/sign-in/sign-in.component.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { AuthService } from './../core/api/auth.service';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { take } from 'rxjs';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'app-sign-in',\n  imports: [\n    MatCardModule,\n    MatButtonModule,\n    MatTabsModule,\n    MatFormFieldModule,\n    FormsModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    MatIconModule,\n  ],\n  templateUrl: './sign-in.component.html',\n  styleUrl: './sign-in.component.scss',\n})\nexport class SignInComponent {\n  signInForm: FormGroup;\n  signUpForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n  ) {\n    this.signInForm = this.fb.group({\n      userName: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n\n    this.signUpForm = this.fb.group({\n      userName: ['', Validators.required],\n      name: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n  }\n\n  onSignIn(): void {\n\n    if (this.signInForm.valid) {\n      console.log('onSignIn', this.signInForm.valid);\n      this.authService\n        .login({\n          username: this.signInForm.value.userName,\n          password: this.signInForm.value.password,\n        })\n        .pipe(take(1))\n        .subscribe();\n    }\n  }\n\n  onSignUp(): void {\n    if (this.signUpForm.valid) {\n      this.authService\n        .register({\n          username: this.signUpForm.value.userName,\n          name: this.signUpForm.value.name,\n          password: this.signUpForm.value.password,\n        })\n        .pipe(take(1))\n        .subscribe();\n    }\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n        \n          \n            UserName\n            \n            @if (signUpForm.get(\"userName\")?.invalid) {\n              Name is required\n            }\n          \n\n          \n            Password\n            \n            @if (signInForm.get(\"password\")?.invalid) {\n              Password is required\n            }\n          \n\n          \n            Sign In\n          \n        \n      \n\n      \n        \n          \n            UserName\n            \n            @if (signUpForm.get(\"userName\")?.invalid) {\n              Name is required\n            }\n          \n\n          \n            Name\n            \n            @if (signUpForm.get(\"name\")?.invalid) {\n              Name is required\n            }\n          \n\n\n\n          \n            Password\n            \n            @if (signUpForm.get(\"password\")?.invalid) {\n              Password is required\n            }\n          \n\n          \n            Sign Up\n          \n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                  UserName                        @if (signUpForm.get(\"userName\")?.invalid) {              Name is required            }                                Password                        @if (signInForm.get(\"password\")?.invalid) {              Password is required            }                                Sign In                                                            UserName                        @if (signUpForm.get(\"userName\")?.invalid) {              Name is required            }                                Name                        @if (signUpForm.get(\"name\")?.invalid) {              Name is required            }                                Password                        @if (signUpForm.get(\"password\")?.invalid) {              Password is required            }                                Sign Up                              '\n    var COMPONENTS = [{'name': 'AdminComponentComponent', 'selector': 'app-admin-component'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'BoardsListComponent', 'selector': 'app-boards-list'},{'name': 'ErrorDisplayComponent', 'selector': 'app-error-display'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'TaksPreviewComponent', 'selector': 'app-taks-preview'},{'name': 'TaskEditorComponent', 'selector': 'app-task-editor'},{'name': 'UserBadgeComponent', 'selector': 'app-user-badge'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignInComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaksPreviewComponent.html":{"url":"components/TaksPreviewComponent.html","title":"component - TaksPreviewComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaksPreviewComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/components/taks-preview/taks-preview.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-taks-preview\n            \n\n\n            \n                imports\n                \n                            MatCardModule\n                            MatButtonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./taks-preview.component.html\n            \n\n\n\n            \n                styleUrl\n                ./taks-preview.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                deleteTask\n                            \n                            \n                                editTask\n                            \n                            \n                                name\n                            \n                            \n                                taks\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                taks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                deleteTask\n                            \n                            \n                                editTask\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/components/taks-preview/taks-preview.component.ts:19\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        taks\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/components/taks-preview/taks-preview.component.ts:18\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        deleteTask\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/components/taks-preview/taks-preview.component.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        editTask\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/components/taks-preview/taks-preview.component.ts:20\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTask\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/board/components/taks-preview/taks-preview.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editTask\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/board/components/taks-preview/taks-preview.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/board/components/taks-preview/taks-preview.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        taks\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/board/components/taks-preview/taks-preview.component.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {\n  ChangeDetectionStrategy,\n  Component,\n  input,\n  output,\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { Task } from '../../../core/models/classes/Task';\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'app-taks-preview',\n  imports: [MatCardModule, MatButtonModule],\n  templateUrl: './taks-preview.component.html',\n  styleUrl: './taks-preview.component.scss',\n})\nexport class TaksPreviewComponent {\n  taks = input.required();\n  name = input.required();\n  editTask = output();\n  deleteTask = output();\n}\n\n    \n\n    \n        \n  \n    {{ taks().title }}\n  \n  \n  \n    Edit\n    Delete\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ taks().title }}          Edit    Delete  '\n    var COMPONENTS = [{'name': 'AdminComponentComponent', 'selector': 'app-admin-component'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'BoardsListComponent', 'selector': 'app-boards-list'},{'name': 'ErrorDisplayComponent', 'selector': 'app-error-display'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'TaksPreviewComponent', 'selector': 'app-taks-preview'},{'name': 'TaskEditorComponent', 'selector': 'app-task-editor'},{'name': 'UserBadgeComponent', 'selector': 'app-user-badge'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TaksPreviewComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/classes/Task.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            TaskDTO\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                comments\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: TaskDTO)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/models/classes/Task.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        TaskDTO\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CommentDTO[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/Task.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/Task.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/Task.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/Task.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CommentDTO } from '../requestModels/model/commentDTO';\nimport { TaskDTO } from '../requestModels/model/taskDTO';\n\nexport class Task implements TaskDTO {\n  id?: number;\n  title?: string;\n  description?: string;\n  comments?: CommentDTO[];\n  constructor(data: TaskDTO) {\n    this.id = data.id;\n    this.title = data.title;\n    this.description = data.description;\n    this.comments = data.comments;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TaskDTO.html":{"url":"interfaces/TaskDTO.html","title":"interface - TaskDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TaskDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/requestModels/model/taskDTO.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            assignee\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            comments\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            createdBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        assignee\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        assignee:         UserDTO\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDTO\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        comments\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        comments:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdBy:         UserDTO\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDTO\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserDTO } from './userDTO';\nimport { CommentDTO } from './commentDTO';\n\n\nexport interface TaskDTO { \n    id?: number;\n    title?: string;\n    description?: string;\n    comments?: Array;\n    createdBy?: UserDTO;\n    assignee?: UserDTO;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskEditorComponent.html":{"url":"components/TaskEditorComponent.html","title":"component - TaskEditorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskEditorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/components/task-editor/task-editor.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-task-editor\n            \n\n\n            \n                imports\n                \n                            MatDialogModule\n                            MatButtonModule\n                            MatToolbarModule\n                            MatIconModule\n                            MatButtonToggleModule\n                            ReactiveFormsModule\n                            MatFormFieldModule\n                            MatInputModule\n                            MatSelectModule\n                            DatePipe\n                            AsyncPipe\n                            MatChipsModule\n                            MatAutocompleteModule\n                            FormsModule\n                            MarkdownComponent\n                            MarkdownModule\n                            TextFieldModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./task-editor.component.html\n            \n\n\n\n            \n                styleUrl\n                ./task-editor.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments$\n                            \n                            \n                                    \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                dialogRef\n                            \n                            \n                                isEditDescription\n                            \n                            \n                                    Readonly\n                                separatorKeysCodes\n                            \n                            \n                                taskForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addComment\n                            \n                            \n                                onCancel\n                            \n                            \n                                onClearTitle\n                            \n                            \n                                    Async\n                                onSave\n                            \n                            \n                                removeComment\n                            \n                            \n                                toggleEditDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(fb: FormBuilder, taskService: TaskService, commentService: CommentService, dialogRef: MatDialogRef, data: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/components/task-editor/task-editor.component.ts:63\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commentService\n                                                  \n                                                        \n                                                                        CommentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addComment\n                        \n                    \n                \n            \n            \n                \naddComment()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/components/task-editor/task-editor.component.ts:91\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onCancel\n                        \n                    \n                \n            \n            \n                \nonCancel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/components/task-editor/task-editor.component.ts:124\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClearTitle\n                        \n                    \n                \n            \n            \n                \nonClearTitle()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/components/task-editor/task-editor.component.ts:83\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onSave\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSave()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/components/task-editor/task-editor.component.ts:112\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeComment\n                        \n                    \n                \n            \n            \n                \nremoveComment(comment: Comment)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/components/task-editor/task-editor.component.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                comment\n                                            \n                                                            Comment\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleEditDescription\n                        \n                    \n                \n            \n            \n                \ntoggleEditDescription()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/components/task-editor/task-editor.component.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/components/task-editor/task-editor.component.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/board/components/task-editor/task-editor.component.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialogRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MatDialogRef\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/components/task-editor/task-editor.component.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEditDescription\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/components/task-editor/task-editor.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        separatorKeysCodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : [ENTER, COMMA]\n                    \n                \n                    \n                        \n                                Defined in src/app/board/components/task-editor/task-editor.component.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        taskForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/components/task-editor/task-editor.component.ts:60\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { firstValueFrom, Observable, repeat, take } from 'rxjs';\nimport {\n  FormBuilder,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { MarkdownComponent, MarkdownModule } from 'ngx-markdown';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogModule,\n  MatDialogRef,\n} from '@angular/material/dialog';\nimport { AsyncPipe, DatePipe } from '@angular/common';\nimport { Comment } from './../../../core/models/classes/Comment';\nimport { CommentService } from '../../../core/api/comment.service';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { Task } from '../../../core/models/classes/Task';\nimport { TaskService } from '../../../core/api/task.service';\nimport { TextFieldModule } from '@angular/cdk/text-field';\n\nconst COMMENTS_UPDATE_TIMEOUT_S = 5 * 1_000;\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'app-task-editor',\n  imports: [\n    MatDialogModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatButtonToggleModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    DatePipe,\n    AsyncPipe,\n    MatChipsModule,\n    MatAutocompleteModule,\n    FormsModule,\n    MarkdownComponent,\n    MarkdownModule,\n    TextFieldModule,\n  ],\n  templateUrl: './task-editor.component.html',\n  styleUrl: './task-editor.component.scss',\n})\nexport class TaskEditorComponent {\n  taskForm: FormGroup;\n  isEditDescription = false;\n  readonly separatorKeysCodes: number[] = [ENTER, COMMA];\n  comments$: Observable;\n\n  constructor(\n    private fb: FormBuilder,\n    private taskService: TaskService,\n    private commentService: CommentService,\n    public dialogRef: MatDialogRef,\n    @Inject(MAT_DIALOG_DATA) public data: { task: Task },\n  ) {\n    this.taskForm = this.fb.group({\n      title: [data.task.title, Validators.required],\n      description: [data.task.description],\n      newComment: [''],\n    });\n\n    this.comments$ = this.commentService\n      .getComments(data.task.id)\n      .pipe(repeat({ delay: COMMENTS_UPDATE_TIMEOUT_S }));\n  }\n\n  onClearTitle(): void {\n    this.taskForm.get('title')?.setValue('');\n  }\n\n  toggleEditDescription(): void {\n    this.isEditDescription = !this.isEditDescription;\n  }\n\n  addComment(): void {\n    const value = this.taskForm.value.newComment.trim();\n    console.log('value', value);\n    if (value) {\n      this.commentService\n        .createComment({\n          content: value,\n          taskId: this.data.task.id,\n        })\n        .pipe(take(1))\n        .subscribe();\n    }\n    this.taskForm.controls['newComment'].setValue('');\n  }\n\n  removeComment(comment: Comment): void {\n    this.data.task.comments = this.data.task.comments.filter(\n      (c) => c.id !== comment.id,\n    );\n  }\n\n  async onSave(): Promise {\n    if (this.taskForm.valid) {\n      const updatedTask: Task = {\n        ...this.data.task,\n        title: this.taskForm.value.title,\n        description: this.taskForm.value.description,\n      };\n      await firstValueFrom(this.taskService.updateTask(updatedTask));\n      this.dialogRef.close(updatedTask);\n    }\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n\n    \n\n    \n        \n  Edit Task\n  \n    \n      \n        Title\n        \n        @if (taskForm.get(\"title\")?.value) {\n          \n            clear\n          \n        }\n        @if (taskForm.get(\"title\")?.hasError(\"required\")) {\n          Title is required\n        }\n      \n\n      \n        @if (!isEditDescription) {\n          \n            \n          \n          \n            Edit Description\n          \n        } @else {\n          \n            \n              Description\n              \n            \n            \n              Preview Description\n            \n          \n        }\n      \n\n      \n      Column\n      \n        @for (column of comments$ | async; track $index) {}\n        {{\n          column.name\n        }}\n      \n     -->\n\n      \n      \n        Comments\n        \n          @for (comment of comments$ | async; track $index) {\n            \n              \n                {{\n                  comment.author.username\n                }}\n                {{\n                  comment.createdAt | date : 'YYYY.MM.dd, HH:mm'\n                }}\n              \n              \n                {{ comment.content }}\n              \n            \n          }\n        \n        \n          \n            Add a comment\n            \n          \n          \n            Add Comment\n          \n        \n      \n    \n  \n  \n    \n      Cancel\n    \n    \n      Save\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Edit Task                    Title                @if (taskForm.get(\"title\")?.value) {                      clear                  }        @if (taskForm.get(\"title\")?.hasError(\"required\")) {          Title is required        }                    @if (!isEditDescription) {                                                      Edit Description                  } @else {                                    Description                                                    Preview Description                              }                  Column              @for (column of comments$ | async; track $index) {}        {{          column.name        }}           -->                    Comments                  @for (comment of comments$ | async; track $index) {                                          {{                  comment.author.username                }}                {{                  comment.createdAt | date : \\'YYYY.MM.dd, HH:mm\\'                }}                                            {{ comment.content }}                                    }                                      Add a comment                                            Add Comment                                          Cancel              Save      '\n    var COMPONENTS = [{'name': 'AdminComponentComponent', 'selector': 'app-admin-component'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'BoardsListComponent', 'selector': 'app-boards-list'},{'name': 'ErrorDisplayComponent', 'selector': 'app-error-display'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'TaksPreviewComponent', 'selector': 'app-taks-preview'},{'name': 'TaskEditorComponent', 'selector': 'app-task-editor'},{'name': 'UserBadgeComponent', 'selector': 'app-user-badge'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TaskEditorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskPreview.html":{"url":"classes/TaskPreview.html","title":"class - TaskPreview","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskPreview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/classes/TaskPreview.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            TaskPreviewDTO\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: TaskPreviewDTO)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/models/classes/TaskPreview.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        TaskPreviewDTO\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/TaskPreview.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/TaskPreview.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TaskPreviewDTO } from '../requestModels/model/taskPreviewDTO';\n\nexport class TaskPreview implements TaskPreviewDTO {\n  id?: number;\n  title?: string;\n  constructor(data: TaskPreviewDTO) {\n    this.id = data.id;\n    this.title = data.title;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TaskPreviewDTO.html":{"url":"interfaces/TaskPreviewDTO.html","title":"interface - TaskPreviewDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TaskPreviewDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/requestModels/model/taskPreviewDTO.ts\n        \n\n\n            \n                Description\n            \n            \n                Kanban API\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TaskPreviewDTO { \n    id?: number;\n    title?: string;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/api/task.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTask\n                            \n                            \n                                deleteTask\n                            \n                            \n                                getAllTasks\n                            \n                            \n                                getTasksByID\n                            \n                            \n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/api/task.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTask\n                        \n                    \n                \n            \n            \n                \ncreateTask(task: Task, boardId: string, columnId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/task.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                boardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                columnId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTask\n                        \n                    \n                \n            \n            \n                \ndeleteTask(id: string | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/task.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTasks\n                        \n                    \n                \n            \n            \n                \ngetAllTasks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/task.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTasksByID\n                        \n                    \n                \n            \n            \n                \ngetTasksByID(id: string | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/task.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTask\n                        \n                    \n                \n            \n            \n                \nupdateTask(updatedTask: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/task.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updatedTask\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/api/tasks'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/api/task.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, Observable } from 'rxjs';\nimport { Task } from '../models/classes/Task';\nimport { TaskDTO } from '../models/requestModels/model/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaskService {\n  private readonly baseUrl = '/api/tasks';\n\n  constructor(private http: HttpClient) {}\n\n  getAllTasks(): Observable {\n    return this.http\n      .get(this.baseUrl)\n      .pipe(map((e) => e.map((el) => new Task(el))));\n  }\n\n  getTasksByID(id: string | number): Observable {\n    return this.http\n      .get(`${this.baseUrl}/${id}`)\n      .pipe(map((e) => new Task(e)));\n  }\n\n  createTask(task: Task, boardId: string, columnId: string): Observable {\n    return this.http\n      .post(this.baseUrl, task, { params: { boardId, columnId } })\n      .pipe(map((e) => new Task(e)));\n  }\n\n  updateTask(updatedTask: Task): Observable {\n    return this.http\n      .put(`${this.baseUrl}/${updatedTask.id.toString()}`, updatedTask)\n      .pipe(map((e) => new Task(e)));\n  }\n\n  deleteTask(id: string | number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThemeService.html":{"url":"injectables/ThemeService.html","title":"injectable - ThemeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ThemeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/theme.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _currentTheme\n                            \n                            \n                                    Private\n                                renderer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toggleTheme\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentTheme\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(document: Document, rendererFactory: RendererFactory2)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/theme.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        document\n                                                  \n                                                        \n                                                                    Document\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rendererFactory\n                                                  \n                                                        \n                                                                    RendererFactory2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toggleTheme\n                        \n                    \n                \n            \n            \n                \ntoggleTheme(val: themeType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/theme.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            themeType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _currentTheme\n                        \n                    \n                \n            \n                \n                    \n                        Type :         themeType\n\n                    \n                \n                \n                    \n                        Default value : 'light'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/theme.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/theme.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentTheme\n                    \n                \n\n                \n                    \n                        getcurrentTheme()\n                    \n                \n                            \n                                \n                                    Defined in src/app/core/services/theme.service.ts:13\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Inject, Injectable, Renderer2, RendererFactory2 } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nexport type themeType = 'light' | 'dark' | 'system';\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeService {\n  private renderer: Renderer2;\n\n  private _currentTheme: themeType = 'light';\n\n  public get currentTheme(): themeType {\n    return this._currentTheme;\n  }\n\n  constructor(\n    @Inject(DOCUMENT) private document: Document,\n    private rendererFactory: RendererFactory2,\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n    this._currentTheme = (localStorage.getItem('theme') ||\n      'system') as themeType;\n  }\n\n  toggleTheme(val: themeType): void {\n    localStorage.setItem('theme', val);\n    this.renderer.removeClass(this.document.body, this.currentTheme);\n    this._currentTheme = val;\n    this.renderer.addClass(this.document.body, this.currentTheme);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/classes/User.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            UserDTO\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: UserDTO)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/models/classes/User.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        UserDTO\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/User.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/User.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/models/classes/User.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserDTO } from '../requestModels/model/userDTO';\n\nexport class User implements UserDTO {\n  id?: number;\n  username?: string;\n  name?: string;\n\n  constructor(data: UserDTO) {\n    this.id = data.id;\n    this.username = data.username;\n    this.name = data.name;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UserBadgeComponent.html":{"url":"components/UserBadgeComponent.html","title":"component - UserBadgeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  UserBadgeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/core/components/user-badge/user-badge.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-user-badge\n            \n\n\n            \n                imports\n                \n                            JsonPipe\n                            MatButtonModule\n                            MatMenuModule\n                            MatIconModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./user-badge.component.html\n            \n\n\n\n            \n                styleUrl\n                ./user-badge.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authService\n                            \n                            \n                                router\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onLogin\n                            \n                            \n                                onLogout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        user\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/core/components/user-badge/user-badge.component.ts:32\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onLogin\n                        \n                    \n                \n            \n            \n                \nonLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/components/user-badge/user-badge.component.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onLogout\n                        \n                    \n                \n            \n            \n                \nonLogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/components/user-badge/user-badge.component.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AuthService)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/user-badge/user-badge.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Router)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/user-badge/user-badge.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/core/components/user-badge/user-badge.component.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n  input,\n} from '@angular/core';\nimport { AuthService } from './../../api/auth.service';\nimport { JsonPipe } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { Router } from '@angular/router';\nimport { User } from '../../models/classes/User';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'app-user-badge',\n  imports: [JsonPipe, MatButtonModule, MatMenuModule, MatIconModule],\n  templateUrl: './user-badge.component.html',\n  styleUrl: './user-badge.component.scss',\n})\nexport class UserBadgeComponent {\n  onLogout() {\n    console.log('onLogout');\n    this.authService.logout();\n    this.router.navigate(['/sign-in']);\n  }\n  onLogin() {\n    console.log('onLogin');\n    this.router.navigate(['/sign-in']);\n  }\n  user = input.required();\n  authService = inject(AuthService);\n  router = inject(Router);\n}\n\n    \n\n    \n        @if(user()){\n  \n    {{ user().name }}\n    ({{ user().username }})\n  \n\n  \n  \n    \n      logout\n      Logout\n    \n  \n}@else {\n  \n    login\n    Login\n  \n}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if(user()){      {{ user().name }}    ({{ user().username }})                logout      Logout      }@else {      login    Login  }'\n    var COMPONENTS = [{'name': 'AdminComponentComponent', 'selector': 'app-admin-component'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BoardComponent', 'selector': 'app-board'},{'name': 'BoardsListComponent', 'selector': 'app-boards-list'},{'name': 'ErrorDisplayComponent', 'selector': 'app-error-display'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'TaksPreviewComponent', 'selector': 'app-taks-preview'},{'name': 'TaskEditorComponent', 'selector': 'app-task-editor'},{'name': 'UserBadgeComponent', 'selector': 'app-user-badge'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'UserBadgeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserDTO.html":{"url":"interfaces/UserDTO.html","title":"interface - UserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/requestModels/model/userDTO.ts\n        \n\n\n            \n                Description\n            \n            \n                Kanban API\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserDTO { \n    id?: number;\n    username?: string;\n    name?: string;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserRegisterDTO.html":{"url":"interfaces/UserRegisterDTO.html","title":"interface - UserRegisterDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserRegisterDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/requestModels/model/userRegisterDTO.ts\n        \n\n\n            \n                Description\n            \n            \n                Kanban API\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserRegisterDTO { \n    username?: string;\n    password?: string;\n    name?: string;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/api/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllUsers\n                            \n                            \n                                promoteToAdmin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/api/user.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \ngetAllUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/user.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        promoteToAdmin\n                        \n                    \n                \n            \n            \n                \npromoteToAdmin(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/api/user.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/api/users'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/api/user.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { User } from '../models/classes/User';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  private readonly baseUrl = '/api/users';\n\n  constructor(private http: HttpClient) {}\n\n  getAllUsers(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  promoteToAdmin(userId: number): Observable {\n    return this.http.post(\n      `${this.baseUrl}/${userId}/promote-to-admin`,\n      {},\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/admin-component/admin-component.component.ts\n            \n            component\n            AdminComponentComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/board.component.ts\n            \n            component\n            BoardComponent\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/board/components/taks-preview/taks-preview.component.ts\n            \n            component\n            TaksPreviewComponent\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/board/components/task-editor/task-editor.component.ts\n            \n            component\n            TaskEditorComponent\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                        src/app/board/components/task-editor/task-editor.component.ts\n            \n            variable\n            COMMENTS_UPDATE_TIMEOUT_S\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/boards-list/boards-list.component.ts\n            \n            component\n            BoardsListComponent\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/core/api/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/app/core/api/board-socket.service.ts\n            \n            injectable\n            BoardSocketService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/core/api/board.service.ts\n            \n            injectable\n            BoardService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/core/api/column.service.ts\n            \n            injectable\n            ColumnService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/core/api/comment.service.ts\n            \n            injectable\n            CommentService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/core/api/task.service.ts\n            \n            injectable\n            TaskService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/core/api/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/core/components/error-display/error-display.component.ts\n            \n            component\n            ErrorDisplayComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/core/components/header/header.component.ts\n            \n            component\n            HeaderComponent\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/core/components/user-badge/user-badge.component.ts\n            \n            component\n            UserBadgeComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/app/core/guards/admin.guard.ts\n            \n            variable\n            adminGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/guards/auth.guard.ts\n            \n            variable\n            authGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/intersceptors/auth.interceptor.ts\n            \n            variable\n            authInterceptor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/models/classes/Board.ts\n            \n            class\n            Board\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/core/models/classes/Column.ts\n            \n            class\n            Column\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/core/models/classes/Comment.ts\n            \n            class\n            Comment\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/core/models/classes/Role.ts\n            \n            class\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/models/classes/Task.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/core/models/classes/TaskPreview.ts\n            \n            class\n            TaskPreview\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/core/models/classes/User.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/core/models/requestModels/model/authenticationRequest.ts\n            \n            interface\n            AuthenticationRequest\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/requestModels/model/board.ts\n            \n            interface\n            Board\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/requestModels/model/boardDTO.ts\n            \n            interface\n            BoardDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/core/models/requestModels/model/column.ts\n            \n            interface\n            Column\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/requestModels/model/columnDTO.ts\n            \n            interface\n            ColumnDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/core/models/requestModels/model/comment.ts\n            \n            interface\n            Comment\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/core/models/requestModels/model/commentDTO.ts\n            \n            interface\n            CommentDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/core/models/requestModels/model/role.ts\n            \n            interface\n            Role\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/requestModels/model/task.ts\n            \n            interface\n            Task\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/core/models/requestModels/model/taskDTO.ts\n            \n            interface\n            TaskDTO\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/core/models/requestModels/model/taskPreviewDTO.ts\n            \n            interface\n            TaskPreviewDTO\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/requestModels/model/user.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/core/models/requestModels/model/userDTO.ts\n            \n            interface\n            UserDTO\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/models/requestModels/model/userRegisterDTO.ts\n            \n            interface\n            UserRegisterDTO\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/services/theme.service.ts\n            \n            injectable\n            ThemeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/app/core/services/theme.service.ts\n            \n            type alias\n            themeType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/not-found/not-found.component.ts\n            \n            component\n            NotFoundComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/sign-in/sign-in.component.ts\n            \n            component\n            SignInComponent\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^19.0.0\n        \n            @angular/common : ^19.0.0\n        \n            @angular/compiler : ^19.0.0\n        \n            @angular/core : ^19.0.0\n        \n            @angular/forms : ^19.0.0\n        \n            @angular/material : ^19.1.1\n        \n            @angular/platform-browser : ^19.0.0\n        \n            @angular/platform-browser-dynamic : ^19.0.0\n        \n            @angular/router : ^19.0.0\n        \n            @auth0/angular-jwt : ^5.2.0\n        \n            @stomp/stompjs : ^7.0.0\n        \n            ngx-markdown : ^19.0.0\n        \n            ngx-permissions : ^19.0.0\n        \n            rxjs : ~7.8.0\n        \n            sockjs-client : ^1.6.1\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nKanbanBoardClientApp\nThis project was generated using Angular CLI version 19.0.7.\nDevelopment server\nTo start a local development server, run:\nExample :ng serveOnce the server is running, open your browser and navigate to http://localhost:4200/. The application will automatically reload whenever you modify any of the source files.\nCode scaffolding\nAngular CLI includes powerful code scaffolding tools. To generate a new component, run:\nExample :ng generate component component-nameFor a complete list of available schematics (such as components, directives, or pipes), run:\nExample :ng generate --helpBuilding\nTo build the project run:\nExample :ng buildThis will compile your project and store the build artifacts in the dist/ directory. By default, the production build optimizes your application for performance and speed.\nRunning unit tests\nTo execute unit tests with the Karma test runner, use the following command:\nExample :ng testRunning end-to-end tests\nFor end-to-end (e2e) testing, run:\nExample :ng e2eAngular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.\nAdditional Resources\nFor more information on using the Angular CLI, including detailed command references, visit the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    11 Components\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    14 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            themeType   (src/.../theme.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/core/services/theme.service.ts\n    \n    \n        \n            \n                \n                    \n                    themeType\n                \n            \n            \n                \n                        \"light\" | \"dark\" | \"system\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            adminGuard   (src/.../admin.guard.ts)\n                        \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            authGuard   (src/.../auth.guard.ts)\n                        \n                        \n                            authInterceptor   (src/.../auth.interceptor.ts)\n                        \n                        \n                            COMMENTS_UPDATE_TIMEOUT_S   (src/.../task-editor.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/core/guards/admin.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        adminGuard\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CanActivateFn\n\n                    \n                \n                \n                    \n                        Default value : (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n\n  if (authService.isAuthenticated() && authService.isAdmin()) {\n    return true;\n  }\n  router.navigate(['/sign-in']);\n  return false;\n}\n                    \n                \n\n\n        \n    \n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    importProvidersFrom(\n      JwtModule.forRoot({\n        config: {\n          tokenGetter: () => {\n            return localStorage.getItem('access_token');\n          },\n          allowedDomains: ['example.com'],\n          disallowedRoutes: ['http://example.com/examplebadroute/'],\n        },\n      }),\n    ),\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideAnimationsAsync(),\n    provideHttpClient(withInterceptorsFromDi()),\n    provideMarkdown(),\n  ],\n}\n                    \n                \n\n\n        \n    \n\n    src/app/core/guards/auth.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        authGuard\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CanActivateFn\n\n                    \n                \n                \n                    \n                        Default value : (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  if (authService.isAuthenticated()) {\n    return true;\n  }\n  router.navigate(['/sign-in']);\n  return false;\n}\n                    \n                \n\n\n        \n    \n\n    src/app/core/intersceptors/auth.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        authInterceptor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpInterceptorFn\n\n                    \n                \n                \n                    \n                        Default value : (req, next) => {\n  const authService = inject(AuthService);\n  const token = authService.token;\n  if (token) {\n    req = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  }\n  return next(req);\n}\n                    \n                \n\n\n        \n    \n\n    src/app/board/components/task-editor/task-editor.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        COMMENTS_UPDATE_TIMEOUT_S\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 5 * 1_000\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
